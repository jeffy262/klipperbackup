######################################################################
## Eddy MCU + Sensors
######################################################################

[mcu eddy]
serial: /dev/serial/by-id/usb-Klipper_rp2040_504450611083D51C-if00
restart_method: command

[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu
sensor_mcu: eddy
min_temp: 10
max_temp: 120

[probe_eddy_current btt_eddy]
sensor_type: ldc1612
#z_offset: 2.5
i2c_mcu: eddy
i2c_bus: i2c0f
x_offset: 0
y_offset: -25

# Eddy USB temperature input
[temperature_probe btt_eddy]
sensor_type: Generic 3950
sensor_pin: eddy:gpio26


######################################################################
## Bed Mesh for 420×420
######################################################################

[bed_mesh]
# Safe margins (15 mm) and offsets applied:
# mesh_min: 15,15
# mesh_max: 405,395
horizontal_move_z: 4
speed: 400
mesh_min: 15, 15
mesh_max: 405, 395
probe_count: 11,11
algorithm: bicubic
scan_overshoot: 8


[safe_z_home]
home_xy_position: 210, 210   # center of 420x420 bed
z_hop: 10
z_hop_speed: 25
speed: 200


######################################################################
## Persistence + Force Move
######################################################################

[save_variables]
filename: ~/printer_data/config/variables.cfg

[force_move]
enable_force_move: True

[delayed_gcode RESTORE_PROBE_OFFSET]
initial_duration: 1.
gcode:
  {% set svv = printer.save_variables.variables %}
  {% if not printer["gcode_macro SET_GCODE_OFFSET"].restored %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ svv.nvm_offset|default(0) }
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=restored VALUE=True
  {% endif %}


######################################################################
## Homing + Z Offset Handling
######################################################################

[gcode_macro G28]
rename_existing: G28.1
gcode:
  G28.1 {rawparams}
  {% if not rawparams or (rawparams and 'Z' in rawparams) %}
    PROBE
    SET_Z_FROM_PROBE
  {% endif %}

[gcode_macro SET_Z_FROM_PROBE]
gcode:
    {% set cf = printer.configfile.settings %}
    SET_GCODE_OFFSET_ORIG Z={printer.probe.last_z_result - cf['probe_eddy_current btt_eddy'].z_offset + printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset}
    G90
    G1 Z{cf.safe_z_home.z_hop}

[gcode_macro Z_OFFSET_APPLY_PROBE]
rename_existing: Z_OFFSET_APPLY_PROBE_ORIG
gcode:
  SAVE_VARIABLE VARIABLE=nvm_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset }

[gcode_macro SET_GCODE_OFFSET]
rename_existing: SET_GCODE_OFFSET_ORIG
variable_restored: False        # whether restored from NVM
variable_runtime_offset: 0
gcode:
  {% if params.Z_ADJUST %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset + params.Z_ADJUST|float }
  {% endif %}

  {% if params.Z %}
    {% set paramList = rawparams.split() %}
    {% set i0 = -1 %}
    {% for i in range(paramList|length) %}
      {% if paramList[i] == "Z=0" and i0 == -1 %}
        {% set i0 = i %}
      {% endif %}
    {% endfor %}
    {% if i0 != -1 %}
      {% set _ = paramList.pop(i0) %}
      {% set _ = paramList.append("Z_ADJUST=" ~ (-printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset)) %}
    {% endif %}
    {% set rawparams = paramList|join(' ') %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE=0
  {% endif %}

  SET_GCODE_OFFSET_ORIG { rawparams }


######################################################################
## Eddy Calibration + Mesh Helpers (with rapid scan)
######################################################################

[gcode_macro PROBE_EDDY_CURRENT_CALIBRATE_AUTO]
gcode:
  SET_Z_FROM_PROBE
  BED_MESH_CLEAR
  G28 X Y
  G90
  G1 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F6000
  {% if 'z' not in printer.toolhead.homed_axes %}
    SET_KINEMATIC_POSITION Z={ printer.toolhead.axis_maximum.z - 1 }
  {% endif %}
  PROBE_EDDY_CURRENT_CALIBRATE CHIP=btt_eddy

[gcode_macro MESH_420_RAPID]
description: Heat (optional), home, then run 420×420 mesh using Eddy rapid scan
# Usage:
#   MESH_420_RAPID                ; use current heater targets
#   MESH_420_RAPID BED=60         ; preheat bed to 60C
#   MESH_420_RAPID BED=60 NOZZLE=150
#   MESH_420_RAPID ADAPTIVE=0     ; full mesh, no adaptive
gcode:
  {% set bed_target = params.BED|default(printer.heater_bed.target|int)|int %}
  {% set noz_target = params.NOZZLE|default(printer.extruder.target|int)|int %}
  {% set adaptive   = params.ADAPTIVE|default(1)|int %}

  M117 Mesh: preparing...
  {% if bed_target > 0 %} M140 S{bed_target} {% endif %}
  {% if noz_target > 0 %} M104 S{noz_target} {% endif %}

  G90
  G28
  {% if bed_target > 0 %} M190 S{bed_target} {% endif %}
  {% if noz_target > 0 %} M109 S{noz_target} {% endif %}

  BED_MESH_CLEAR
  {% if adaptive > 0 %}
    BED_MESH_CALIBRATE ADAPTIVE=1 METHOD=rapid_scan
  {% else %}
    BED_MESH_CALIBRATE METHOD=rapid_scan
  {% endif %}

  BED_MESH_PROFILE SAVE=current
  BED_MESH_OUTPUT
  M117 Mesh complete

[gcode_macro EDDY_Z_CALIBRATE_WIZARD]
description: Heat, center, run PROBE_CALIBRATE, then save offset if requested
# Usage:
#   EDDY_Z_CALIBRATE_WIZARD
#   EDDY_Z_CALIBRATE_WIZARD BED=60 NOZZLE=200 SAVE=1
gcode:
  {% set bed = params.BED|default(60)|int %}
  {% set noz = params.NOZZLE|default(200)|int %}
  {% set do_save = params.SAVE|default(0)|int %}
  {% set cx = (printer.toolhead.axis_maximum.x/2)|int %}
  {% set cy = (printer.toolhead.axis_maximum.y/2)|int %}

  M117 Eddy Z: preheating...
  M140 S{bed}
  M104 S{noz}
  G90
  G28 X Y
  M190 S{bed}
  M109 S{noz}
  G1 X{cx} Y{cy} F6000

  {% if 'z' not in printer.toolhead.homed_axes %}
    SET_KINEMATIC_POSITION Z={ printer.toolhead.axis_maximum.z - 1 }
  {% endif %}

  M117 Eddy Z: follow UI to paper-test, then ACCEPT
  PROBE_CALIBRATE

  {% if do_save > 0 %}
    M117 Saving Eddy Z offset...
    {% if printer.gcode_macro.Z_OFFSET_APPLY_PROBE is defined %}
      Z_OFFSET_APPLY_PROBE
    {% endif %}
    SAVE_CONFIG
  {% else %}
    RESPOND TYPE=info MSG="Calibration accepted. Run SAVE_CONFIG in console to persist (or re-run with SAVE=1)."
  {% endif %}
