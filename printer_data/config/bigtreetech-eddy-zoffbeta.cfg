# The MCU section only applies to the Eddy USB. For Eddy Coil you will use the MCU name of the toolboard that you connected the Eddy Coil to.
# Eddy USB MCU
[mcu eddy]
serial: /dev/serial/by-id/usb-Klipper_rp2040_504450611083D51C-if00
restart_method: command

[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu
sensor_mcu: eddy
min_temp: 10
max_temp: 120

######################################################################
## Eddy Probe (BTT Eddy USB) — offsets & wiring
######################################################################
[probe_eddy_current btt_eddy]
sensor_type: ldc1612
z_offset: 2.5                                  # Calibrated Z offset (probe->nozzle). Keep >= 0.
                                               # Ensure [bed_mesh].horizontal_move_z >= this.
#i2c_address:
i2c_mcu: eddy                                  # Eddy USB MCU name (matches your [mcu eddy])
i2c_bus: i2c0f                                 # Eddy USB default I2C on the probe board

# XY offsets are probe location relative to the nozzle.
# +X = probe is to the RIGHT of the nozzle
# +Y = probe is BEHIND the nozzle (towards the back)
x_offset: 0
y_offset: 20

# Eddy USB temperature input
[temperature_probe btt_eddy]
sensor_type: Generic 3950
sensor_pin: eddy:gpio26

######################################################################
## I2C Bus - REQUIRED for Eddy USB
######################################################################
[i2c_bus i2c0f]
i2c_mcu: eddy
sda_pin: eddy:gpio0
scl_pin: eddy:gpio1

######################################################################
## Bed Mesh — nozzle reach X:5..425, Y:25..435; probe y_offset +20; 5 mm edge margin
######################################################################
[bed_mesh]
# Travel height during XY moves while probing (must be >= probe z_offset).
horizontal_move_z: 3.0

# Probe move speed (mm/s).
speed: 100

# Mesh limits in NOZZLE coordinates, adjusted for the probe's offset and a 5mm margin.
# **Review and adjust these for your specific printer dimensions!**
mesh_min: 15, 25
mesh_max: 415, 400

# Probe density (odd counts give a center point). A 7x7 grid is a good balance of speed and detail.
probe_count: 7, 7

# Interpolation method.
algorithm: bicubic

######################################################################
## Safe Z Home — home Z at bed center using the probe
######################################################################
[safe_z_home]
# Center point in NOZZLE coordinates.
home_xy_position: 215, 230

# Lift before probing to clear clips/parts.
z_hop: 10
z_hop_speed: 25

# Travel speed while moving to the home point (mm/s).
speed: 200

###############################Macros and related################################
#This section contains macros and related config sections. Some should be used, others are optional. Read the comment above each one to find out whether or not to uncomment it for your installation.

# This macro is generally not recommended as it overrides a core Klipper command.
# It's better to call the required commands directly from your START_PRINT macro.
#[gcode_macro BED_MESH_CALIBRATE]
#rename_existing: BED_MESH_CALIBRATE_ORIG
#gcode:
#  # Defaults you can still override from the UI/console
#  {% set profile = params.PROFILE|default("default")|string %}
#  {% set method  = params.METHOD|default("rapid_scan")|string %}
#  {% set hz      = params.HORIZONTAL_MOVE_Z|default(5)|float %}
#  {% set adaptive = params.ADAPTIVE|default(0)|int %}
#
#  {% if adaptive|int == 1 %}
#    BED_MESH_CALIBRATE_ORIG PROFILE={profile} METHOD={method} ADAPTIVE=1 HORIZONTAL_MOVE_Z={hz}
#  {% else %}
#    BED_MESH_CALIBRATE_ORIG PROFILE={profile} METHOD={method} HORIZONTAL_MOVE_Z={hz}
#  {% endif %}

# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[save_variables]
filename: ~/printer_data/config/variables.cfg

# Uncomment this if you are using Eddy as the probe AND the homing endstop
[force_move]
enable_force_move: True # Allows a user to move the z axis down if they have no other means of homing Z and need to calibrate the Eddy.

# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[delayed_gcode RESTORE_PROBE_OFFSET]
initial_duration: 1.
gcode:
  {% set svv = printer.save_variables.variables %}
  {% if not printer["gcode_macro SET_GCODE_OFFSET"].restored %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ svv.nvm_offset|default(0) }
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=restored VALUE=True
  {% endif %}

# Use this G28 macro if you want to automatically probe Z after homing.
# It's safer to use this than to override the core G28.
# You will need to change the G28 call in your START_PRINT to this macro.
[gcode_macro HOME_AND_PROBE]
gcode:
  G28
  PROBE
  SET_Z_FROM_PROBE

# Uncomment this if you are using Eddy as the probe AND the homing endstop
[gcode_macro SET_Z_FROM_PROBE]
gcode:
    {% set cf = printer.configfile.settings %}
    SET_GCODE_OFFSET_ORIG Z={printer.probe.last_z_result - cf['probe_eddy_current btt_eddy'].z_offset + printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset}
    G90
    G1 Z{cf.safe_z_home.z_hop}

# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[gcode_macro Z_OFFSET_APPLY_PROBE]
rename_existing: Z_OFFSET_APPLY_PROBE_ORIG
gcode:
  SAVE_VARIABLE VARIABLE=nvm_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset }

# Uncomment the lines in this macro if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[gcode_macro SET_GCODE_OFFSET]
rename_existing: SET_GCODE_OFFSET_ORIG
variable_restored: False  # Mark whether the var has been restored from NVM
variable_runtime_offset: 0
gcode:
  {% set z_adjust = params.Z_ADJUST|default(0.0)|float %}
  {% if 'Z' in params %}
    {% set temp_runtime = printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset %}
    SET_GCODE_OFFSET_ORIG Z={params.Z|float}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={0}
  {% elif z_adjust != 0 %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset + z_adjust }
    SET_GCODE_OFFSET_ORIG Z={-printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset}
  {% else %}
    SET_GCODE_OFFSET_ORIG {rawparams}
  {% endif %}

# This macro automates a lot of the frequency mapping process and simplifies the steps significantly.
[gcode_macro PROBE_EDDY_CURRENT_CALIBRATE_AUTO]
gcode:
  M117 Calibrating Eddy Probe...
  BED_MESH_CLEAR
  # Home Z first to a safe height to prevent a crash
  G28 Z
  G28 X Y
  G90 # Abs positioning
  G1 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } Z{ printer.toolhead.axis_maximum.z/2 } F6000
  PROBE_EDDY_CURRENT_CALIBRATE CHIP=btt_eddy