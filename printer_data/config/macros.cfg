######################################################################
## PRIME / PURGE
######################################################################

[gcode_macro PURGE_LINE_SIMPLE]
description: Two-line prime; self-heats if TEMP>0; skips if too cold
variable_length: 120
variable_speed: 900
variable_start_x: 150
variable_start_y: 17
variable_z: 0.28
variable_gap: 0.6
variable_e_per_line: 35.0
variable_cleanup_retract: 1.0
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    RESPOND TYPE=echo MSG="PURGE_LINE_SIMPLE skipped: axes not homed."
  {% else %}
    {% set x0    = params.X|default(start_x)|float %}
    {% set y0    = params.Y|default(start_y)|float %}
    {% set z0    = params.Z|default(z)|float %}
    {% set len   = params.LENGTH|default(length)|float %}
    {% set spd   = params.SPEED|default(speed)|float %}
    {% set gapv  = params.GAP|default(gap)|float %}
    {% set eline = params.E_PER_LINE|default(e_per_line)|float %}
    {% set zsafe = z0 if z0 > 0.05 else 0.05 %}
    {% set t     = params.TEMP|default(0)|float %}
    {% set minT  = printer.configfile.settings.extruder.min_extrude_temp|int %}

    ; only wait if a TEMP was explicitly given and > 0
    {% if t > 0 %}
      M109 S{t}
    {% endif %}

    {% if printer.extruder.temperature < minT %}
      RESPOND TYPE=echo MSG="PURGE_LINE_SIMPLE skipped: nozzle below {minT}C."
    {% else %}
      SAVE_GCODE_STATE NAME=PLS
      G90
      M83
      G92 E0

      G1 X{x0} Y{y0} Z{zsafe} F6000
      G1 X{x0 + len} E{eline} F{spd}

      G1 Z{zsafe + 0.05} F3000
      G1 X{x0 + len} Y{y0 + gapv} F6000
      G1 Z{zsafe} F3000
      G1 X{x0} E{eline} F{spd}

      G1 E-{params.CLEANUP_RETRACT|default(cleanup_retract)|float} F1800
      M82
      RESTORE_GCODE_STATE NAME=PLS
    {% endif %}
  {% endif %}


[gcode_macro PURGE]
description: Purge a straight length at current temp (safety checked)
gcode:
  {% set length = params.LENGTH|default(50)|int %}
  {% set speed  = params.SPEED|default(600)|int %}
  {% set minT   = printer.configfile.settings.extruder.min_extrude_temp|int %}

  {% if printer.extruder.temperature < minT %}
    RESPOND TYPE=echo MSG="PURGE skipped: nozzle below {minT}C."
  {% else %}
    M83
    G1 E{length} F{speed}
    M82
  {% endif %}


######################################################################
## START / END / CANCEL
######################################################################

[gcode_macro START_PRINT]
description: Preheat, home, mesh, purge in pocket, optional wipe
# Defaults (overridable via BED=, EXTRUDER=, PURGE_X/Y/LEN/Z, RAPID=0/1)
variable_purge_x: 145
variable_purge_y: 17
variable_purge_len: 140
variable_purge_z: 2.0
gcode:
  {% set target_bed      = params.BED|default(60)|int %}
  {% set target_extruder = params.EXTRUDER|default(200)|int %}
  {% set use_rapid       = params.RAPID|default(1)|int %}
  {% set px   = params.PURGE_X|default(purge_x)|float %}
  {% set py   = params.PURGE_Y|default(purge_y)|float %}
  {% set plen = params.PURGE_LEN|default(purge_len)|float %}
  {% set pz   = params.PURGE_Z|default(purge_z)|float %}
  {% set zsafe = pz if pz > 0.6 else 0.6 %}
  {% set travel_f = 6000 %}
  {% set z_f      = 3000 %}
  {% set minT = printer.configfile.settings.extruder.min_extrude_temp|int %}
  {% set guardT = minT if minT >= 170 else 170 %}
  {% set preheat_nozzle = target_extruder if target_extruder <= guardT else guardT %}

  ; start gentle preheat so stray E moves won't error
  M104 S{preheat_nozzle}     ; nozzle to min(extruder target, guard)
  M140 S{target_bed}         ; start bed
  M109 S{minT}               ; wait to at least min extrude temp

  ; --- HOME HERE ---
  G90
  G28 X Y
  G28 Z                       ; Safe Z Home will center & probe
  {% if printer.toolhead.homed_axes != "xyz" %}
    RESPOND TYPE=error MSG="Homing failed; aborting START_PRINT."
    CANCEL_PRINT
    {action_raise_error("START_PRINT aborted: not homed")}
  {% endif %}
  ; ------------------

  ; wait for bed
  M190 S{target_bed}

  ; mesh (rapid if available)
  BED_MESH_CLEAR
  {% if use_rapid == 1 %}
    BED_MESH_CALIBRATE ADAPTIVE=1 METHOD=rapid_scan
  {% else %}
    BED_MESH_CALIBRATE ADAPTIVE=1
  {% endif %}
  BED_MESH_PROFILE SAVE=current

  ; move to purge pocket safely
  G1 Z{zsafe} F{z_f}
  G1 X{px} Y{py + 15.0} F{travel_f}
  G1 Y{py} F3000

  ; heat nozzle to print temp at the pocket
  G92 E0
  M109 S{target_extruder}

  ; purge line(s)
  {% if printer.configfile.config.get('gcode_macro PURGE_LINE_SIMPLE') is not none %}
    PURGE_LINE_SIMPLE X={px} Y={py} LENGTH={plen}
  {% else %}
    M83
    G1 X{px + plen} E15 F1200
    G1 E-1.0 F1800
    M82
  {% endif %}

  ; optional wipe
  {% if printer.configfile.config.get('gcode_macro WIPE_NOZZLE') is not none %}
    WIPE_NOZZLE
  {% endif %}

  ; hand back to slicer
  G92 E0
  G1 Z4.0 F{z_f}
  SET_IDLE_TIMEOUT TIMEOUT=900
  G1 Z10.0 F{z_f}


[gcode_macro PRINT_END]
description: Park, cool, then raise to +30 mm at park (capped to Zmax)
# Tunables (override at call time if desired)
variable_park_x: 20.0                 # X park near left
variable_park_y_offset: 5.0           # park at (Ymax - offset)
variable_z_hop: 10.0                  # initial safety hop before XY move
variable_raise_at_park: 30.0          # final raise at park (capped)
variable_retract: 2.0                 # short retract at end (mm)

gcode:
  SAVE_GCODE_STATE NAME=STATE_PRINT_END

  M400
  G92 E0

  # Short retract only if hot enough
  {% set minT = printer.configfile.settings.extruder.min_extrude_temp|int %}
  {% if printer.extruder.temperature >= minT %}
    G91
    G1 E-{retract} F1800
    G90
  {% endif %}

  {% if printer.toolhead.homed_axes == "xyz" %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set cz    = printer.gcode_move.position.z|float %}
    {% set hop   = z_hop if cz + z_hop <= max_z else (max_z - cz) if max_z > cz else 0 %}
    {% set park_y = (printer.toolhead.axis_maximum.y|float) - park_y_offset %}
    {% set final_target_z = cz + raise_at_park if (cz + raise_at_park) <= max_z else max_z %}

    ; 1) small safety hop for travel
    G91
    G1 Z{hop} F3000
    G90

    ; 2) move to park XY
    G0 X{park_x} Y{park_y} F6000

    ; 3) raise to min(cz + raise_at_park, Zmax) at park
    G1 Z{final_target_z} F3000

  {% else %}
    ; Not homed: only a protective relative raise
    G91
    G1 Z{raise_at_park} F3000
    G90
  {% endif %}

  M107                       ; part cooling fan OFF
  TURN_OFF_HEATERS          ; hotend/bed OFF
  BED_MESH_CLEAR            ; optional, clear active mesh

  ; Keep the parked position (don’t restore motion state)
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0

  ; Optional LED effect if defined
  {% if printer.configfile.config.get('led_effect under_standby_leds') is not none %}
    SET_LED_EFFECT EFFECT=under_standby_leds REPLACE=1
  {% endif %}

  M117 Print complete



[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
description: Safe cancel — hop, park, then raise to +30 at park (capped to Zmax)
# Tunables
variable_park_x: 20.0
variable_park_y_offset: 5.0           # park at (Ymax - offset)
variable_z_hop: 10.0                  # initial safety hop before XY move
variable_raise_at_park: 30.0          # final raise AT park (capped)
gcode:
  {% set travel_f = 6000 %}
  {% set z_f      = 3000 %}

  CLEAR_PAUSE
  M107
  TURN_OFF_HEATERS

  {% if printer.toolhead.homed_axes == "xyz" %}
    SAVE_GCODE_STATE NAME=CANCELMOVE

    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set cz    = printer.gcode_move.position.z|float %}
    {% set hop   = z_hop if cz + z_hop <= max_z else (max_z - cz) if max_z > cz else 0 %}
    {% set park_y = (printer.toolhead.axis_maximum.y|float) - park_y_offset %}
    {% set final_target_z = cz + raise_at_park if (cz + raise_at_park) <= max_z else max_z %}

    ; 1) safety hop for travel
    G91
    G1 Z{hop} F{z_f}
    G90

    ; 2) move to park XY
    G0 X{park_x} Y{park_y} F{travel_f}

    ; 3) raise to min(cz + raise_at_park, Zmax) at park
    G1 Z{final_target_z} F{z_f}

    RESTORE_GCODE_STATE NAME=CANCELMOVE MOVE=0
  {% else %}
    ; Not homed: only a protective relative Z-hop
    G91
    G1 Z{raise_at_park} F{z_f}
    G90
  {% endif %}

  BED_MESH_CLEAR
  SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
  BASE_CANCEL_PRINT




######################################################################
## PAUSE / RESUME
######################################################################

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
variable_zhop: 0
variable_etemp: 0
variable_keep_heat: False
gcode:
  {% set z = params.Z|default(30)|int %}
  {% if 'KEEP_HEAT' in params %}
    {% set keep = (params.KEEP_HEAT ~ '')|lower in ['1','true','on','yes'] %}
  {% else %}
    {% set keep = keep_heat %}
  {% endif %}

  {% if printer['pause_resume'].is_paused|int == 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}

    {% if printer.configfile.config.get('filament_switch_sensor filament_sensor') is not none %}
      SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
    {% endif %}

    SAVE_GCODE_STATE NAME=PAUSE
    BASE_PAUSE

    {% if (printer.gcode_move.position.z + z) <= printer.toolhead.axis_maximum.z %}
      G91
      G1 Z{z} F1200
      G90
    {% else %}
      RESPOND TYPE=echo MSG="PAUSE: zhop exceeds Z max; skipping zhop."
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
    {% endif %}

    ; Park front-left
    G90
    G1 X0 Y0 F6000

    SAVE_GCODE_STATE NAME=PAUSEPARK

    ; Small retract
    G91
    G1 E-20 F1800
    G90

    {% if not keep %}
      M104 S0
    {% endif %}

    SET_IDLE_TIMEOUT TIMEOUT=43200
  {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
  {% set e = params.E|default(20)|int %}
  {% if printer['pause_resume'].is_paused|int == 1 %}
    {% if printer.configfile.config.get('filament_switch_sensor filament_sensor') is not none %}
      SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
    {% endif %}

    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}

    {% if etemp|int > 0 %}
      M109 S{etemp|int}
    {% endif %}

    {% if printer.configfile.config.get('gcode_macro PURGE_LINE_SIMPLE') is not none %}
      PURGE_LINE_SIMPLE X=150 Y=17 LENGTH=120
    {% endif %}

    {% if printer.configfile.config.get('gcode_macro WIPE_NOZZLE_PAUSE') is not none %}
      WIPE_NOZZLE_PAUSE
    {% endif %}

    RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=3000

    G91
    M83
    {% set minT = printer.configfile.settings.extruder.min_extrude_temp|int %}
    {% if printer[printer.toolhead.extruder].temperature >= minT %}
      G1 Z{(zhop * -1)} E{e} F900
    {% else %}
      G1 Z{(zhop * -1)} F900
    {% endif %}
    M82

    RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=3000
    BASE_RESUME
  {% endif %}


######################################################################
## Filament Change / Load / Unload
######################################################################

[gcode_macro M600]
description: Filament change using PAUSE (keeps hotend hot)
gcode:
  {% set X = params.X|default(245)|int %}
  {% set Y = params.Y|default(25)|int %}
  {% set Z = params.Z|default(30)|int %}
  {% set E = params.E|default(100)|int %}

  SAVE_GCODE_STATE NAME=M600_state
  PAUSE KEEP_HEAT=1
  G90
  G1 X{X} Y{Y} F6000

  {% set minT = printer.configfile.settings.extruder.min_extrude_temp|int %}
  {% if printer[printer.toolhead.extruder].temperature >= minT %}
    M83
    G1 E10 F500
    G1 E-{E} F1000
    M82
  {% else %}
    RESPOND TYPE=echo MSG="M600: Hotend too cold; heat before extruding."
  {% endif %}


[gcode_macro LOAD_FILAMENT]
description: Heat, move front-center (Z+30), load, purge, optional cool
variable_load_distance: 80
variable_purge_distance: 30
variable_nozzle_preheat_temp: 235
variable_turn_off_extruder: False
gcode:
  {% set load_speed  = params.LOAD_SPEED|default(600)|int %}
  {% set purge_speed = params.PURGE_SPEED|default(100)|int %}
  {% set target_temp = params.TARGET_TEMP|default(nozzle_preheat_temp)|int %}
  {% set min_temp    = params.MIN_TEMP|default(180)|int %}
  {% set turnoff_in  = params.TURN_OFF|default(turn_off_extruder)|string|lower %}
  {% set turnoff     = turnoff_in in ['1','true','on','yes'] %}

  SAVE_GCODE_STATE NAME=load_state
  M107

  ; park front-center and Z-hop 30 (only if homed)
  {% if printer.toolhead.homed_axes == "xyz" %}
    FRONT_CENTER Z_HOP=30 FRONT_Y=25 HOME=0
  {% else %}
    ; not homed: just protective Z hop
    G91
    G1 Z30 F3000
    G90
  {% endif %}

  M104 S{ target_temp if target_temp >= min_temp else min_temp }
  M109 S{ target_temp if target_temp >= min_temp else min_temp }

  M83
  G92 E0
  G1 E{load_distance}  F{load_speed}
  G1 E{purge_distance} F{purge_speed}
  G1 E-5 F1800
  M82

  {% if turnoff %} M104 S0 {% endif %}

  RESTORE_GCODE_STATE NAME=load_state
  M117 Filament load complete




[gcode_macro UNLOAD_FILAMENT]
description: Heat, Z-hop 35mm, park front-center, tip-shape, unload
variable_unload_distance: 100
variable_nozzle_preheat_temp: 235
variable_min_temp: 180
variable_turn_off_extruder: False
variable_retract_speed: 600
variable_tip_retract_1: 5.0
variable_tip_pushback: 1.0
variable_tip_retract_2: 8.0
variable_tip_speed_fast: 1200
variable_z_hop: 35.0
variable_park_x: -1        # -1 = auto-center X
variable_park_y: 10        # near the front
gcode:
  {% set target_temp = params.TARGET_TEMP|default(nozzle_preheat_temp)|int %}
  {% set min_t       = params.MIN_TEMP|default(min_temp)|int %}
  {% set r_speed     = params.RETRACT_SPEED|default(retract_speed)|int %}
  {% set zhop        = params.Z_HOP|default(z_hop)|float %}
  {% set parkx_raw   = params.PARK_X|default(park_x)|float %}
  {% set parkx       = (printer.toolhead.axis_maximum.x/2) if parkx_raw < 0 else parkx_raw %}
  {% set parky       = params.PARK_Y|default(park_y)|float %}
  {% if 'TURN_OFF' in params %}
    {% set turnoff = (params.TURN_OFF ~ '')|lower in ['1','true','on','yes'] %}
  {% else %}
    {% set turnoff = turn_off_extruder %}
  {% endif %}
  {% set travel_f    = 6000 %}
  {% set z_f         = 3000 %}

  SAVE_GCODE_STATE NAME=UF
  M107

  ; Z-hop then park (only if homed)
  {% if printer.toolhead.homed_axes == "xyz" %}
    G91
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set cz    = printer.gcode_move.position.z|float %}
    {% set hop   = zhop if cz + zhop <= max_z else (max_z - cz) if max_z > cz else 0 %}
    G1 Z{hop} F{z_f}
    G90
    G1 X{parkx} Y{parky} F{travel_f}
  {% endif %}

  ; Heat to at least MIN_TEMP
  {% if target_temp < min_t %}{% set target_temp = min_t %}{% endif %}
  M104 S{target_temp}
  M109 S{target_temp}

  ; Tip shaping + unload
  M83
  G92 E0
  G1 E-{tip_retract_1} F{tip_speed_fast}
  G1 E{tip_pushback}  F{tip_speed_fast}
  G1 E-{tip_retract_2} F{tip_speed_fast}
  G1 E-{unload_distance} F{r_speed}
  M82

  {% if turnoff %} M104 S0 {% endif %}

  RESTORE_GCODE_STATE NAME=UF
  M117 Filament unload complete

[gcode_macro FRONT_CENTER]
description: Lift Z, move to X center & front Y (safe), optional absolute Z
# Defaults (override when calling if you like)
variable_front_y: 25.0      # front Y position
variable_z_hop: 35.0        # lift before moving
gcode:
  {% set front_y = params.FRONT_Y|default(front_y)|float %}
  {% set zhop    = params.Z_HOP|default(z_hop)|float %}
  {% set abs_z   = params.ABS_Z|default(none) %}
  {% set do_home = params.HOME|default(1)|int %}
  {% set travel_f = params.TRAVEL_F|default(6000)|int %}
  {% set z_f      = params.Z_F|default(3000)|int %}

  SAVE_GCODE_STATE NAME=FRONT_CENTER_STATE

  {% if printer.toolhead.homed_axes != "xyz" and do_home == 1 %}
    G28
  {% endif %}

  {% if printer.toolhead.homed_axes == "xyz" %}
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set cx    = max_x / 2.0 %}

    {% set fy = front_y %}
    {% if fy < 5.0 %}{% set fy = 5.0 %}{% endif %}
    {% if fy > (max_y - 5.0) %}{% set fy = max_y - 5.0 %}{% endif %}

    {% set cz  = printer.gcode_move.position.z|float %}
    {% set hop = zhop if cz + zhop <= max_z else (max_z - cz) if max_z > cz else 0 %}

    G91
    G1 Z{hop} F{z_f}
    G90
    G1 X{cx} Y{fy} F{travel_f}

    {% if abs_z is not none %}
      {% set az = abs_z|float %}
      {% if az <= max_z %}
        G1 Z{az} F{z_f}
      {% endif %}
    {% endif %}
  {% else %}
    ; Not homed and HOME=0 → just a protective Z-hop
    G91
    G1 Z{zhop} F{z_f}
    G90
  {% endif %}

  RESTORE_GCODE_STATE NAME=FRONT_CENTER_STATE MOVE=0




######################################################################
## Gantry, PID, Utilities
######################################################################

[gcode_macro G32]
description: Re-home, (optional) QGL, park center
gcode:
  BED_MESH_CLEAR
  G28
  {% if printer.quad_gantry_level is defined %}
    QUAD_GANTRY_LEVEL
    G28 Z
  {% else %}
    G28 Z
  {% endif %}
  G0 X{(printer.toolhead.axis_maximum.x/2)|int} Y{(printer.toolhead.axis_maximum.y/2)|int} Z30 F3600


[gcode_macro PIDtuneHOTEND]
gcode:
  {% set TEMP = params.TEMP|default(200)|float %}
  PID_CALIBRATE HEATER=extruder TARGET={TEMP}


[gcode_macro PIDtuneBED]
gcode:
  {% set TEMP = params.TEMP|default(60)|float %}
  PID_CALIBRATE HEATER=heater_bed TARGET={TEMP}


######################################################################
## Power & Idle
######################################################################

[gcode_macro POWER_OFF_PRINTER]
description: Toggle smart plug off via Moonraker (adjust device name)
gcode:
  {action_call_remote_method("set_device_power", device="printer_plug", state="off")}

[delayed_gcode delayed_printer_off]
initial_duration: 0.
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    POWER_OFF_PRINTER
  {% endif %}

[idle_timeout]
gcode:
  M118 Printer has been idle for 5 minutes. Printer will shutdown in 10 minutes!
  M84
  TURN_OFF_HEATERS
  UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=300
timeout: 900


######################################################################
## Git Backup (optional)
######################################################################

[gcode_macro update_git]
gcode:
  {% set message = params.MESSAGE|default() %}
  {% if message %}
    RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
  {% else %}
    RUN_SHELL_COMMAND CMD=update_git_script
  {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c \"$0\""
timeout: 90.0
verbose: True
