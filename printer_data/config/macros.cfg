######################################################################
## PRIME / PURGE
######################################################################

[gcode_macro PURGE_LINE_SIMPLE]
description: Simple two-line prime, fixed extrusion, with self-contained heating

variable_length: 120                      # length of each purge line (mm)
variable_speed: 900                       # move speed while drawing the lines (mm/min)
variable_start_x: 150                     # X start (mm)
variable_start_y: 15                      # Y start (mm)
variable_z: 0.28                          # Z height for the purge (first-layer height)
variable_gap: 0.6                         # gap between the two lines (mm)
variable_e_per_line: 35.0                 # total extrusion per line (mm of filament)
variable_cleanup_retract: 1.0             # retract at the end to reduce stringing (mm)

gcode:
  # Guard rails: require homed axes and a safe hotend temperature.
  {% if printer.toolhead.homed_axes != "xyz" %}
    RESPOND TYPE=info MSG="PURGE_LINE_SIMPLE skipped: axes not homed."
  {% else %}
    ; ---------- Parameter collection (with defaults) ----------
    {% set x0 = params.X|default(start_x)|float %}
    {% set y0 = params.Y|default(start_y)|float %}
    {% set z0 = params.Z|default(z)|float %}
    {% set len = params.LENGTH|default(length)|float %}
    {% set spd = params.SPEED|default(speed)|float %}
    {% set gapv = params.GAP|default(gap)|float %}
    {% set eline = params.E_PER_LINE|default(e_per_line)|float %}
    {% set zsafe = z0 if z0 > 0.05 else 0.05 %}
    {% set target_extruder_temp = params.TEMP|default(printer.extruder.target)|float %}

    ; ---------- Wait for hotend to reach target temp ----------
    M109 S{target_extruder_temp}

    ; ---------- Setup ----------
    SAVE_GCODE_STATE NAME=PLS
    G90                        ; absolute XYZ moves
    M83                        ; relative extrusion mode
    G92 E0                     ; zero out the extruder coordinate

    ; ---------- First line: draw to X+len ----------
    G1 X{x0} Y{y0} Z{zsafe} F6000
    G1 X{x0 + len} E{eline} F{spd}

    ; ---------- Hop, shift by gap, then second line back to start ----------
    G1 Z{zsafe + 0.05} F3000
    G1 X{x0 + len} Y{y0 + gapv} F6000
    G1 Z{zsafe} F3000
    G1 X{x0} E{eline} F{spd}

    ; ---------- Clean up: small retract, restore modes/state ----------
    G1 E-{params.CLEANUP_RETRACT|default(cleanup_retract)|float} F1800
    M82                        ; back to absolute extrusion mode
    RESTORE_GCODE_STATE NAME=PLS
  {% endif %}

######################################################################
## START / END / CANCEL
######################################################################

[gcode_macro START_PRINT]
description: Preheat, home, mesh, purge in front pocket, then wipe

# Usage:
#   START_PRINT BED=60 EXTRUDER=200 RAPID=1 PURGE_X=145 PURGE_Y=15 PURGE_LEN=140 PURGE_Z=2.0
# Notes:
# - RAPID=1 tries BED_MESH_CALIBRATE METHOD=rapid_scan if supported by your build.
# - PURGE uses PURGE_LINE_SIMPLE when available; otherwise falls back to a single pass.
gcode:
  RAINBOW_LEDS

  ; ---------- User parameters with defaults ----------
  {% set target_bed       = params.BED|default(60)|int %}
  {% set target_extruder  = params.EXTRUDER|default(200)|int %}
  {% set use_rapid        = params.RAPID|default(1)|int %}      ; 1 → attempt rapid_scan

  ; Front purge pocket geometry (NOZZLE coordinates)
  {% set purge_x_start    = params.PURGE_X|default(145)|float %}
  {% set purge_y          = params.PURGE_Y|default(15)|float %}
  {% set purge_len        = params.PURGE_LEN|default(140)|float %}  ; 145 → 285 typical
  {% set approach_y_safe  = 30.0 %}
  {% set purge_z          = params.PURGE_Z|default(2.0)|float %}
  {% set travel_f         = 6000 %}
  {% set z_f              = 3000 %}

  ; ---------- Preheat a little and start bed heating ----------
  M104 S171
  M140 S{target_bed}

  ; ---------- Home ----------
  G90
  G28

  ; ---------- Wait for bed to reach target ----------
  M190 S{target_bed}

  ; ---------- Mesh the bed (prefer rapid_scan if available) ----------
  BED_MESH_CLEAR
  {% if use_rapid == 1 %}
    BED_MESH_CALIBRATE ADAPTIVE=1 METHOD=rapid_scan
  {% else %}
    BED_MESH_CALIBRATE ADAPTIVE=1
  {% endif %}
  BED_MESH_PROFILE SAVE=current
; ---------- Heat hotend to print temperature at the pocket ----------
  G92 E0
  M109 S{target_extruder}
  ; ---------- Move safely to purge pocket ----------
  G1 Z{ purge_z if purge_z > 0.6 else 0.6 } F{z_f}
  G1 X{purge_x_start} Y{approach_y_safe} F{travel_f}
  G1 Y{purge_y} F3000


  ; ---------- Purge in the pocket ----------
  {% if printer.configfile.config.get('gcode_macro PURGE_LINE_SIMPLE') is not none %}
    PURGE_LINE_SIMPLE X={purge_x_start} Y={purge_y} LENGTH={purge_len}
  {% else %}
    ; Fallback: single straight purge
    M83
    G1 X{purge_x_start + purge_len} E15 F1200
    G1 E-1.0 F1800
    M82
  {% endif %}

  ; ---------- Optional wipe (if macro exists) ----------
  {% if printer.configfile.config.get('gcode_macro WIPE_NOZZLE') is not none %}
    WIPE_NOZZLE
  {% endif %}

  ; ---------- Hand back to slicer ----------
  G92 E0
  G1 Z4.0 F{z_f}
  SET_IDLE_TIMEOUT TIMEOUT=900
  G1 Z10.0 F{z_f}


[gcode_macro PRINT_END]
description: Park, cool, clean up after print
gcode:
    ; Save to allow a controlled end-sequence without restoring the parked pose
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    ; Finish queued moves and relieve pressure
    M400
    G92 E0
    G1 E-10 F1800

    ; Lift and park
    G91
    G0 Z10 F3000
    G90
    G0 X20 Y{printer.toolhead.axis_maximum.y - 5} F6000  ; rear-left park

    ; Power down hot bits and clear mesh (optional)
    TURN_OFF_HEATERS
    M107
    BED_MESH_CLEAR

    ; Intentionally no RESTORE here—keeps the parked position


[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
description: Safe cancel sequence (power down, park, then call base)
gcode:
    CLEAR_PAUSE
    TURN_OFF_HEATERS
    M107
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
    PRINT_END
    BASE_CANCEL_PRINT


######################################################################
## PAUSE / RESUME
######################################################################

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
variable_zhop: 0         # storage for how high we hopped on pause
variable_etemp: 0        # storage for the hotend target at pause time
variable_keep_heat: False
gcode:
    ; Z is the Z-hop height to apply on pause. KEEP_HEAT=1 keeps hotend at temp.
    {% set z = params.Z|default(30)|int %}
    {% set keep = params.KEEP_HEAT|default(keep_heat)|lower in ['1','true','on','yes'] %}

    {% if printer['pause_resume'].is_paused|int == 0 %}
        ; Remember settings for RESUME
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}

        ; Disable filament sensor during pause if present
        {% if printer.configfile.config.get('filament_switch_sensor filament_sensor') is not none %}
          SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
        {% endif %}

        ; Save state and call Klipper's base pause
        SAVE_GCODE_STATE NAME=PAUSE
        BASE_PAUSE

        ; Safe Z-hop, but never exceed max Z
        {% if (printer.gcode_move.position.z + z) <= printer.toolhead.axis_maximum.z %}
            G91
            G1 Z{z} F1200
            G90
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}

        ; Park at front-left (home corner)
        G90
        G1 X0 Y0 F6000

        ; Save this parked position for RESUME to restore
        SAVE_GCODE_STATE NAME=PAUSEPARK

        ; Small retract to reduce ooze while paused
        G91
        G1 E-20 F1800
        G90

        ; Optionally cool hotend unless KEEP_HEAT requested
        {% if not keep %}
          M104 S0
        {% endif %}

        ; Extend idle timeout while paused (12 hours)
        SET_IDLE_TIMEOUT TIMEOUT=43200
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0         # populated by PAUSE
variable_etemp: 0        # populated by PAUSE
gcode:
  ; E parameter is how much to re-prime after un-zhop.
  {% set e = params.E|default(20)|int %}

  {% if printer['pause_resume'].is_paused|int == 1 %}
    ; Re-enable filament sensor if present
    {% if printer.configfile.config.get('filament_switch_sensor filament_sensor') is not none %}
      SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
    {% endif %}

    ; Restore normal idle timeout
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}

    ; Reheat if we saved a target at pause time
    {% if etemp|int > 0 %}
      M109 S{etemp|int}
    {% endif %}

    ; Quick purge lane on resume to clear any ooze (offset slightly in Y)
    {% if printer.configfile.config.get('gcode_macro PURGE_LINE_SIMPLE') is not none %}
      PURGE_LINE_SIMPLE X=150 Y=17 LENGTH=120
    {% endif %}

    ; Optional wipe on resume (if user provided macro exists)
    {% if printer.configfile.config.get('gcode_macro WIPE_NOZZLE_PAUSE') is not none %}
      WIPE_NOZZLE_PAUSE
    {% endif %}

    ; Return from parked XY position
    RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=3000

    ; Un-zhop and reprime (only extrude if at a safe extrusion temp)
    G91
    M83
    {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
      G1 Z{zhop * -1} E{e} F900
    {% else %}
      G1 Z{zhop * -1} F900
    {% endif %}
    M82

    ; Restore original state and resume print
    RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=3000
    BASE_RESUME
  {% endif %}


######################################################################
## Filament Change / Purge / Load / Unload
######################################################################

[gcode_macro M600]
description: Filament change using PAUSE (keeps hotend hot)
# Usage:
#   M600 X=245 Y=25 Z=30 E=100
# - Moves to park, performs retract for change, and relies on PAUSE/RESUME flow.
gcode:
  {% set X = params.X|default(245)|int %}
  {% set Y = params.Y|default(25)|int %}
  {% set Z = params.Z|default(30)|int %}
  {% set E = params.E|default(100)|int %}

  SAVE_GCODE_STATE NAME=M600_state

  ; Pause but keep the hotend heated for safe extrusions
  PAUSE KEEP_HEAT=1

  ; (PAUSE already applied the zhop). Park and perform retract
  G90
  G1 X{X} Y{Y} F6000

  ; Only extrude moves if hot enough to avoid cold extrusion
  {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
    M83
    G1 E10 F500                 ; small relief blob
    G1 E-{E} F1000              ; full retract for filament change
    M82
  {% else %}
    { action_respond_info("Hotend too cold for M600 extrusion; heat before changing.") }
  {% endif %}


[gcode_macro PURGE]
description: Purge straight length at current temp
# Usage:
#   PURGE LENGTH=50 SPEED=600
gcode:
  {% set length = params.LENGTH|default(50)|int %}
  {% set speed = params.SPEED|default(600)|int %}
  M117 PURGING {length}mm..
  {% if printer.extruder.temperature < printer.configfile.settings.extruder.min_extrude_temp %}
    { action_respond_info("Hotend too cold to purge!") }
  {% else %}
    M83
    G1 E{length} F{speed}
    M82
  {% endif %}


[gcode_macro LOAD_FILAMENT]
# Declarations unchanged
variable_load_distance: 80
variable_purge_distance: 30
variable_nozzle_preheat_temp: 235
variable_turn_off_extruder: False
gcode:
    ; Parameters (with defaults)
    {% set load_speed  = params.LOAD_SPEED|default(600)|int %}
    {% set purge_speed = params.PURGE_SPEED|default(100)|int %}
    {% set target_temp = params.TARGET_TEMP|default(nozzle_preheat_temp)|int %}
    {% set min_temp    = params.min_temp|default(180)|int %}          ; preserved logic
    {% set turnoff_in  = params.TURN_OFF|default(turn_off_extruder)|string|lower %}
    {% set turnoff     = turnoff_in in ['1','true','on','yes'] %}

    ...
    ; Final load and purge lengths (keep as-is)
    G1 E{load_distance}  F{load_speed}
    G1 E{purge_distance} F{purge_speed}


[gcode_macro UNLOAD_FILAMENT]
# Declarations unchanged
variable_unload_distance: 100
variable_nozzle_preheat_temp: 235
variable_turn_off_extruder: False
variable_min_temp: 180
variable_retract_speed: 600
variable_tip_retract_1: 5.0
variable_tip_pushback: 1.0
variable_tip_retract_2: 8.0
variable_tip_speed_fast: 1200
variable_z_hop: 2.0
gcode:
    ; Parameters (with defaults)
    {% set target_temp = params.TARGET_TEMP|default(nozzle_preheat_temp)|float %}
    {% set min_temp    = params.MIN_TEMP|default(min_temp)|float %}
    {% set r_speed     = params.RETRACT_SPEED|default(retract_speed)|float %}
    {% set turn_off    = params.TURN_OFF|default(turn_off_extruder)|lower in ['1','true','on','yes'] %}

    ...
    ; Optional Z hop before unloading (only if homed)
    {% if z_hop|float > 0 and printer.toolhead.homed_axes == "xyz" %}
      G91
      G1 Z{z_hop} F600
      G90
    {% endif %}

    ; Tip-shaping sequence and full unload
    G91
    G92 E0
    G1 E-{tip_retract_1} F{tip_speed_fast}
    G1 E{tip_pushback}  F{tip_speed_fast}
    G1 E-{tip_retract_2} F{tip_speed_fast}
    G1 E-{unload_distance} F{r_speed}


######################################################################
## Gantry, PID, Utilities
######################################################################

[gcode_macro G32]
description: Re-home, (optional) QGL, park center
# Runs full home, then QUAD_GANTRY_LEVEL when available, then parks center at Z30.
gcode:
    BED_MESH_CLEAR
    G28
    {% if printer.quad_gantry_level is defined %}
      QUAD_GANTRY_LEVEL
      G28 Z
    {% else %}
      G28 Z
    {% endif %}
    ; Park at bed center (X/Y midpoints) at Z30
    G0 X{(printer.toolhead.axis_maximum.x/2)|int} Y{(printer.toolhead.axis_maximum.y/2)|int} Z30 F3600


[gcode_macro PIDtuneHOTEND]
# PID autotune for the hotend at the requested temperature (defaults to 200)
gcode:
    {% set TEMP = params.TEMP|default(200)|float %}
    PID_CALIBRATE HEATER=extruder TARGET={TEMP}


[gcode_macro PIDtuneBED]
# PID autotune for the bed at the requested temperature (defaults to 60)
gcode:
    {% set TEMP = params.TEMP|default(60)|float %}
    PID_CALIBRATE HEATER=heater_bed TARGET={TEMP}



######################################################################
## Power & Idle
######################################################################

[gcode_macro POWER_OFF_PRINTER]
description: Toggle smart plug off via Moonraker (adjust device name to yours)
# Requires a Moonraker device named "printer_plug"
gcode:
  {action_call_remote_method("set_device_power", device="printer_plug", state="off")}

[delayed_gcode delayed_printer_off]
initial_duration: 0.
gcode:
  ; When idle_timeout fires, wait 300s more; if still Idle, power off
  {% if printer.idle_timeout.state == "Idle" %}
    POWER_OFF_PRINTER
  {% endif %}

[idle_timeout]
# After 900s (15 minutes) of inactivity:
# - warn the user
# - disable steppers and turn off heaters
# - schedule a delayed power off in 300s (5 min)
gcode:
  M118 "Printer has been idle for 5 minutes. Printer will shutdown in 10 minutes!"
  M84
  TURN_OFF_HEATERS
  UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=300
timeout: 900



######################################################################
## Git Backup
######################################################################

[gcode_macro update_git]
# Usage:
#   UPDATE_GIT                          -> runs script with no commit message
#   UPDATE_GIT MESSAGE="Fix Z offset"   -> runs script with -c "Fix Z offset"
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
# Calls your backup script directly (no commit message)
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
# Calls your backup script with a message; ensure your script reads the value
# the way you expect (many scripts use $1, not $0).
command: bash -c "bash $HOME/klipper-backup/script.sh -c \"$0\""
timeout: 90.0
verbose: True
