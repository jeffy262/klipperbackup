[gcode_macro START_PRINT]

gcode:

 {% set target_bed = params.BED|int %}
 {% set target_extruder = params.EXTRUDER|int %}
 

# Start bed heating

 M140 S{target_bed}

# Use absolute coordinates

 G90

# Reset the G-Code Z offset (adjust Z offset if needed)

#SET_GCODE_OFFSET Z=0

# Home the printer

 G28

# Move the nozzle near the bed

 G1 Z5 F5000

# Move the nozzle very close to the bed

 G1 Z2.5 F300

# Preheat nozzle to 140 and not wait.

 M104 S140{extruder_temp} T0

 #M104 T0

# Wait for bed to reach temperature

 M190 S{target_bed}

# level the bed, save and load mesh

   BED_MESH_CLEAR

  BED_MESH_CALIBRATE ADAPTIVE=1 Method=rapid_scan ; Auto bed leveling 

   BED_MESH_PROFILE SAVE=current

   BED_MESH_PROFILE LOAD=current

# Reset Extruder

 G92 E0

# Move Z Axis up

 G1 Z2.0 F3000

#Begin heating up extruder

# M104 S{target_extruder}  T0

# Move to start position

 G1 X165 Y25 Z2.5 F5000.0

# Set temp to printing temp and wait

 M109 S{target_extruder}

# Draw the first line

 G1 X265 Y25 Z0 F400.0 E30
 G1 X265 Y26 Z0 F100.0 ;Move to side a little

 #G1 X265 Y30  E20 Z0.28 F400 ;Draw the second line
 #G1X265 Y31 Z0.28 F100.0 ;Move to side a little



# Reset Extruder

 G92 E0

# Move Z Axis up

 G1 Z2.0 F3000

# Print message on LCD

 M117 By your command!

#Add this Start G-code to Cura:

#SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=bed_temp VALUE={material_bed_temperature_layer_0}

#SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=extruder_temp VALUE={material_print_temperature_layer_0}

#START_PRINT





[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:

     

    # safe anti-stringing move coords
    #{% set th = printer.toolhead %}
    #{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    #{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    #{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10 F1800                ; retract filament
    G91                            ; relative positioning
    G0 Z10.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z20 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X20 Y410 F3600            ; park nozzle at rear
    BED_MESH_CLEAR
    
    
    #G1 X10 Y400 F6000;Finish print
    G4 S10
    M84 X Y E ;Disable all steppers but Z
    
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
   # STATUS_BUSY





[gcode_macro PAUSE_MACRO]
gcode:
    
      M5
      PAUSE
      #PARK_MACRO
      #SET_IDLE_TIMEOUT TIMEOUT=7200 #should turn off motors after a specific time limit

[gcode_macro PURGE]
gcode:
      M117 PURGING..
      G91
      G1 E50 F250
      G90

[gcode_macro LOAD_FILAMENT]
variable_load_distance: 80        # Distance to load filament into the extruder
variable_purge_distance: 50        # Distance to purge filament after loading
variable_nozzle_preheat_temp: 235  # Default preheat temperature for the nozzle
variable_turn_off_extruder: True   # Option to turn off the extruder after loading (True/False)
gcode:
     G1 Z30 F3000
    # Parameters and settings
    {% set load_speed = params.LOAD_SPEED|default(600) %}  # Speed in mm/min for fast filament loading
    {% set purge_speed = params.PURGE_SPEED|default(300) %}  # Speed in mm/min for purging filament
    {% set target_temp = params.TARGET_TEMP|default(nozzle_preheat_temp) %}  # Target temperature for the nozzle
    {% set min_temp = params.MIN_TEMP|default(225) %}  # Minimum safe temperature for extrusion

    # Save current state of the printer
    SAVE_GCODE_STATE NAME=load_state

    # Heat directly to the target temperature if it's above the minimum temperature
    {% if target_temp >= min_temp %}
        M104 S{target_temp} ; Set extruder to target temperature
        M109 s{target_temp} ; Wait for extruder to reach target temperature
    {% else %}
        # Heat to minimum temperature first if target is too low
        M104 S{min_temp} ; Set extruder to safe minimum temperature
        M109 s{min_temp} ; Wait for extruder to reach safe minimum temperature
    {% endif %}

    # Begin filament loading process
    G91 ; Set relative positioning for extrusion
    G92 E0 ; Reset extruder position
    G1 E{load_distance} F{load_speed} ; Load filament at the specified loading speed
    G1 E{purge_distance} F{purge_speed} ; Purge filament at the slower purging speed

    # Optionally turn off the extruder heater after loading
    {% if turn_off_extruder %}
        M104 S0 ; Turn off extruder heater
    {% endif %}

    # Restore previous state of the printer
    G90 ; Restore absolute positioning
    RESTORE_GCODE_STATE NAME=load_state

    # Completion message
    M117 Filament load complete

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance: 100      # Distance to retract filament from the extruder
variable_nozzle_preheat_temp: 235  # Default preheat temperature for unloading
variable_turn_off_extruder: True   # Option to turn off the extruder after unloading (True/False)
gcode:
    # Parameters and settings
    {% set retract_speed = params.RETRACT_SPEED|default(600) %}  # Speed for retracting filament
    {% set target_temp = params.TARGET_TEMP|default(nozzle_preheat_temp) %}  # Target temperature for the nozzle
    {% set min_temp = params.MIN_TEMP|default(180) %}  # Minimum safe temperature for extrusion

    # Save current state of the printer
    SAVE_GCODE_STATE NAME=unload_state

    # Heat the nozzle to the target temperature if required
    {% if printer.extruder.temperature < target_temp %}
        # Ensure the nozzle is heated to the target temperature or at least the minimum safe temperature
        {% if target_temp >= min_temp %}
            M104 S{target_temp} ; Set extruder to target temperature
            M109 S{target_temp} ; Wait for extruder to reach target temperature
        {% else %}
            M104 S{min_temp} ; Set extruder to safe minimum temperature
            M109 S{min_temp} ; Wait for extruder to reach safe minimum temperature
        {% endif %}
    {% endif %}

    # Begin filament unloading process
    G91 ; Set relative positioning for extrusion
    G92 E0 ; Reset extruder position
    G1 E-{unload_distance} F{retract_speed} ; Retract filament at the specified speed

    # Optionally turn off the extruder heater after unloading
    {% if turn_off_extruder %}
        M104 S0 ; Turn off extruder heater
    {% endif %}

    # Restore previous state of the printer
    G90 ; Restore absolute positioning
    RESTORE_GCODE_STATE NAME=unload_state

    # Completion message
    M117 Filament unload complete



[gcode_macro RESUME_MACRO]
gcode:
      M117 RESUMING...
      RESUME
      

#[gcode_macro M300]
#gcode:
#    SET_PIN PIN=BEEPER_pin VALUE={params.S|default(100)|int}
#    G4 P{params.P|default(1000)|int}
#    SET_PIN PIN=BEEPER_pin VALUE=0



		


[gcode_macro CANCEL_PRINT]
#description: Cancel the actual running print
#rename_existing: CANCEL_PRINT_BASE
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:

    # safe anti-stringing move coords
    #{% set th = printer.toolhead %}
    #{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
   # {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    #{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10 F1800                ; retract filament
    G91                            ; relative positioning
    #G0 Z10.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z20 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X20 Y410 F3600            ; park nozzle at rear
    BED_MESH_CLEAR
    G4 S10

    M84 X Y E ;Disable all steppers but Z
   
    




[gcode_macro G32]
gcode:
    BED_MESH_CLEAR

    G28
    CQGL #Conditional QUAD_GANTRY_LEVEL
    G28 Z
   #park center of bed 175,175
    G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------

##################################################
#     Power Macros
##################################################
# Description: This section has a macro that calls moonraker to toggle our relay, a macro for delayed gcode, and a macro to call the delayed gcode when our printer enters the state "idle"

[gcode_macro POWER_OFF_PRINTER]
# Description: This macro asks moonraker to toggle our "relay" state to "off"
gcode:
  {action_call_remote_method("set_device_power", device="printer_plug", state="off")}
# Comments:
# action_call_remote_method is used to call a method registered by a remote client (moonraker)
# "set_device_power" is the method we want to call from the moonraker.cfg
# "device" is the name of the deivce defined in moonraker.cfg
# "state" is the state of the relay, on, off, or toggle

  
[delayed_gcode delayed_printer_off]
# Description: This macro calls the "POWER_OFF_PRINTER" macro once the "printer" object is in state "idle"
initial_duration: 0.
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    POWER_OFF_PRINTER
  {% endif %}
# Comments:
# "delayed_gcode" is a way to execute gcode after a set delay
# "initial_duration"
#   The duration of the initial delay (in seconds). If set to a
#   non-zero value the delayed_gcode will execute the specified number
#   of seconds after the printer enters the "ready" state. This can be
#   useful for initialization procedures or a repeating delayed_gcode.
#   If set to 0 the delayed_gcode will not execute on startup.
#   Default is 0.
# "POWER_OFF_PRINTER" calls the "POWER_OFF_PRINTER" macro defined above


##################################################
#     Idle Timeout
##################################################
[idle_timeout]
# Description: This macro is called when the printer goes into an idle state and calls the previous delayed_gcode. It updates the delay to the duration defined below.
# After 5 minutes (300seconds) of being idle, the gcode below will be called. It tells the relay to shut off after 10 minutes (600seconds).
gcode:
  M118 #Printer has been idle for 5 minutes. Printer will shutdown in 10 minutes!
  M84
  TURN_OFF_HEATERS
  UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=600 ; This is how long the relay will switch after the printer has gone idle
timeout: 300 ; This is how long it will take for the printer to go idle
# i.e. total time to shutoff is DURATION+timeout

# Comments:
# "idle_timeout" is a module that tracks the "state" of the printer. The "state" can be "Idle", "Printing", or "Ready"
# "M84" turns off the stepper motors
# "TURN_OFF_HEATERS" turns of the heaters
# "UPDATE_DELAYED_GCODE"
#   UPDATE_DELAYED_GCODE [ID=<name>] [DURATION=<seconds>]:
#   Updates the delay duration for the identified [delayed_gcode] and starts the timer for gcode execution.
#   A value of 0 will cancel a pending delayed gcode from executing.

