######################################################################
## PRIME / PURGE
######################################################################
[gcode_macro PURGE_LINE]
description: Two-line prime with volumetric E calc (compat version, no {% set %})
# Defaults – adjust to taste
variable_nozzle: 0.40                  # mm nozzle diameter
variable_line_height: 0.20             # mm line height
variable_line_width_factor: 1.20       # width = nozzle * factor (if LINE_WIDTH not provided)
variable_length: 120                   # mm per line
variable_speed: 900                    # mm/min extrusion speed (~15 mm/s)
variable_start_x: 165                  # where to draw
variable_start_y: 25
variable_z: 0.28                       # prime Z
variable_gap: 0.6                      # mm between the two lines
variable_cleanup_retract: 1.0          # mm retract afterward

gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    RESPOND TYPE=info MSG="PURGE_LINE skipped: axes not homed."
  {% elif printer.extruder.temperature < printer.configfile.settings.extruder.min_extrude_temp|float %}
    RESPOND TYPE=info MSG="PURGE_LINE skipped: hotend too cold."
  {% else %}
    SAVE_GCODE_STATE NAME=PURGE_LINE_STATE

    G90
    M83
    G92 E0

    ; pull inputs (inline) and derived geometry
    ; line geometry
    ; width = explicit LINE_WIDTH param or nozzle * factor
    ; volume per mm = width * height
    ; E length = (volume * line_length) / filament_area
    ; filament area = π * (fd/2)^2

    ; convenience inline values
    ; NOTE: You can override via params: NOZZLE, LINE_WIDTH, LINE_HEIGHT, LENGTH, SPEED, X, Y, Z, GAP, CLEANUP_RETRACT

    ; first line
    G1 X{ params.X|default(start_x)|float } Y{ params.Y|default(start_y)|float } Z{ [params.Z|default(z)|float, 0.05]|max } F6000
    G1 X{ (params.X|default(start_x)|float) + (params.LENGTH|default(length)|float) } \
       E{  (
              (params.LINE_WIDTH|default( (params.NOZZLE|default(nozzle)|float) * line_width_factor )|float)
              * (params.LINE_HEIGHT|default(line_height)|float)
              * (params.LENGTH|default(length)|float)
           )
           /
           ( 3.14159265 * ((printer.configfile.settings.extruder.filament_diameter|default(1.75)|float / 2.0) ** 2) )
        } \
       F{ params.SPEED|default(speed)|float }

    ; hop & offset for second line
    G1 Z{ [params.Z|default(z)|float, 0.05]|max + 0.05 } F3000
    G1 X{ (params.X|default(start_x)|float) + (params.LENGTH|default(length)|float) } \
       Y{ (params.Y|default(start_y)|float) + (params.GAP|default(gap)|float) } F6000
    G1 Z{ [params.Z|default(z)|float, 0.05]|max } F3000

    ; second line back
    G1 X{ params.X|default(start_x)|float } \
       E{  (
              (params.LINE_WIDTH|default( (params.NOZZLE|default(nozzle)|float) * line_width_factor )|float)
              * (params.LINE_HEIGHT|default(line_height)|float)
              * (params.LENGTH|default(length)|float)
           )
           /



######################################################################
## START / END / CANCEL
######################################################################

[gcode_macro START_PRINT]
description: Preheat, home, mesh, and prime
gcode:
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}

  M104 S120                        ; safe probing temp
  M140 S{target_bed}

  G90
  G28

  {% if printer.gcode_macro.RAINBOW_LEDS is defined %}
    RAINBOW_LEDS
  {% endif %}

  M190 S{target_bed}

  BED_MESH_CLEAR
  {% if printer.scanner is defined %}
    BED_MESH_CALIBRATE ADAPTIVE=1 METHOD=rapid_scan
  {% else %}
    BED_MESH_CALIBRATE ADAPTIVE=1
  {% endif %}
  BED_MESH_PROFILE SAVE=current

  G1 Z5 F3000
  G92 E0

  ; final nozzle heat
  M109 S{target_extruder}

  ; clean two-line prime (inherits the defaults but you can override)
  ; Example overrides: LENGTH=140 SPEED=1200 NOZZLE=0.4 LINE_HEIGHT=0.24
  PURGE_LINE

  G92 E0
  G1 Z4.0 F3000

  SET_IDLE_TIMEOUT TIMEOUT=900

  {% if printer.gcode_macro.WIPE_NOZZLE is defined %}
    WIPE_NOZZLE
  {% endif %}

  G1 Z10.0 F3000




[gcode_macro PRINT_END]
description: Park, cool, clean up after print
gcode:
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400
    G92 E0
    G1 E-10 F1800

    G91
    G0 Z10 F3000
    G90

    G0 X20 Y{printer.toolhead.axis_maximum.y - 5} F6000

    TURN_OFF_HEATERS
    M107
    BED_MESH_CLEAR

    {% if printer.gcode_macro.RAINBOW_LEDS_OFF is defined %}
      RAINBOW_LEDS_OFF
    {% endif %}

    ; Restore planner/modes before disabling steppers
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0

    M84 X Y E                      ; keep Z powered


[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
description: Safe cancel sequence
gcode:
    CLEAR_PAUSE
    TURN_OFF_HEATERS
    M107
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
    PRINT_END
    BASE_CANCEL_PRINT


######################################################################
## PAUSE / RESUME
######################################################################

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
variable_zhop: 0
variable_etemp: 0
variable_keep_heat: False
gcode:
    {% set z = params.Z|default(10)|int %}
    {% set keep = params.KEEP_HEAT|default(keep_heat)|lower in ['1','true','on','yes'] %}

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}

        ; disable filament sensor if present (adjust name if needed)
        {% if printer.configfile.config.get('filament_switch_sensor filament_sensor') is not none %}
          SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
        {% endif %}

        SAVE_GCODE_STATE NAME=PAUSE
        BASE_PAUSE

        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
            G91
            G1 Z{z} F900
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}

        G90
        G1 X10 Y10 F6000
        SAVE_GCODE_STATE NAME=PAUSEPARK

        G1 E-20 F1800

        {% if not keep %}
          M104 S0
        {% endif %}

        SET_IDLE_TIMEOUT TIMEOUT=43200     ; 12h
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    {% set e = params.E|default(20)|int %}

    {% if printer['pause_resume'].is_paused|int == 1 %}
        ; re-enable filament sensor if present
        {% if printer.configfile.config.get('filament_switch_sensor filament_sensor') is not none %}
          SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
        {% endif %}

        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}

        {% if etemp|int > 0 %}
            M109 S{etemp|int}
        {% endif %}

        {% if printer.gcode_macro.PURGE_LINE is defined %}
            PURGE_LINE
        {% endif %}
        {% if printer.gcode_macro.WIPE_NOZZLE_PAUSE is defined %}
            WIPE_NOZZLE_PAUSE
        {% endif %}

        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=3000

        G91
        M83
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
          G1 Z{zhop * -1} E{e} F900
        {% else %}
          G1 Z{zhop * -1} F900
        {% endif %}
        M82

        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=3000
        BASE_RESUME
    {% endif %}


######################################################################
## Filament Change / Purge / Load / Unload
######################################################################

[gcode_macro M600]
description: Filament change using PAUSE (keeps hotend hot)
gcode:
  {% set X = params.X|default(245)|int %}
  {% set Y = params.Y|default(25)|int %}
  {% set Z = params.Z|default(30)|int %}
  {% set E = params.E|default(100)|int %}

  SAVE_GCODE_STATE NAME=M600_state

  ; Pause but keep heat so extrusions are safe
  PAUSE KEEP_HEAT=1

  ; (PAUSE already did zhop). Move/park and perform retract
  G90
  G1 X{X} Y{Y} F6000

  ; only extrude if hot enough
  {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
    M83
    G1 E10 F500                 ; small blob to relieve pressure
    G1 E-{E} F1000              ; full retract for change
    M82
  {% else %}
    { action_respond_info("Hotend too cold for M600 extrusion; heat before changing.") }
  {% endif %}

  ; user swaps filament now; RESUME to continue
  ; (no RESTORE here; RESUME will restore)


[gcode_macro PURGE]
description: Purge straight length at current temp
gcode:
  {% set length = params.LENGTH|default(50)|int %}
  {% set speed = params.SPEED|default(600)|int %}
  M117 PURGING {length}mm..
  {% if printer.extruder.temperature < printer.configfile.settings.extruder.min_extrude_temp %}
    { action_respond_info("Hotend too cold to purge!") }
  {% else %}
    M83
    G1 E{length} F{speed}
    M82
  {% endif %}


[gcode_macro LOAD_FILAMENT]
description: Heat, load, purge, optional cool
variable_load_distance: 80
variable_purge_distance: 30
variable_nozzle_preheat_temp: 235
variable_turn_off_extruder: False
gcode:
    {% set load_speed  = params.LOAD_SPEED|default(600)|int %}
    {% set purge_speed = params.PURGE_SPEED|default(100)|int %}
    {% set target_temp = params.TARGET_TEMP|default(nozzle_preheat_temp)|int %}
    {% set min_temp    = params.MIN_TEMP|default(180)|int %}

    SAVE_GCODE_STATE NAME=load_state
    M107

    {% if printer.toolhead.homed_axes == "xyz" %}
      G91
      G1 Z5 F3000
      G90
    {% endif %}

    M104 S{{ target_temp if target_temp >= min_temp else min_temp }}
    M109 S{{ target_temp if target_temp >= min_temp else min_temp }}

    G91
    G92 E0
    G1 E{load_distance}  F{load_speed}
    G1 E{purge_distance} F{purge_speed}
    G90
    G1 E-5 F1800

    {% if turn_off_extruder|bool %}
      M104 S0
    {% endif %}

    RESTORE_GCODE_STATE NAME=load_state
    M117 Filament load complete


[gcode_macro UNLOAD_FILAMENT]
description: Safely heat and fully retract filament
variable_unload_distance: 100
variable_nozzle_preheat_temp: 235
variable_turn_off_extruder: False
variable_min_temp: 180
variable_retract_speed: 600
variable_tip_retract_1: 5.0
variable_tip_pushback: 1.0
variable_tip_retract_2: 8.0
variable_tip_speed_fast: 1200
variable_z_hop: 2.0
gcode:
    M107
    {% set target_temp = params.TARGET_TEMP|default(nozzle_preheat_temp)|float %}
    {% set min_temp    = params.MIN_TEMP|default(min_temp)|float %}
    {% set r_speed     = params.RETRACT_SPEED|default(retract_speed)|float %}
    {% set turn_off    = params.TURN_OFF|default(turn_off_extruder)|lower in ['1','true','on','yes'] %}

    SAVE_GCODE_STATE NAME=UNLOAD_STATE

    {% if target_temp < min_temp %}
      {% set target_temp = min_temp %}
    {% endif %}

    M104 S{target_temp}
    M109 S{target_temp}

    {% if z_hop|float > 0 and printer.toolhead.homed_axes == "xyz" %}
      G91
      G1 Z{z_hop} F600
      G90
    {% endif %}

    G91
    G92 E0
    G1 E-{tip_retract_1} F{tip_speed_fast}
    G1 E{tip_pushback}  F{tip_speed_fast}
    G1 E-{tip_retract_2} F{tip_speed_fast}
    G1 E-{unload_distance} F{r_speed}
    G90

    RESTORE_GCODE_STATE NAME=UNLOAD_STATE

    {% if turn_off %}
      M104 S0
    {% endif %}

    M117 Filament unload complete


######################################################################
## Gantry, PID, Utilities
######################################################################

[gcode_macro G32]
description: Re-home, (optional) QGL, park center
gcode:
    BED_MESH_CLEAR
    G28
    {% if printer.quad_gantry_level is defined %}
      QUAD_GANTRY_LEVEL
      G28 Z
    {% else %}
      G28 Z
    {% endif %}
    ; park at bed center
    G0 X{(printer.toolhead.axis_maximum.x/2)|int} Y{(printer.toolhead.axis_maximum.y/2)|int} Z30 F3600


[gcode_macro PIDtuneHOTEND]
gcode:
    {% set TEMP = params.TEMP|default(200)|float %}
    PID_CALIBRATE HEATER=extruder TARGET={TEMP}


[gcode_macro PIDtuneBED]
gcode:
    {% set TEMP = params.TEMP|default(60)|float %}
    PID_CALIBRATE HEATER=heater_bed TARGET={TEMP}


######################################################################
## Power & Idle
######################################################################

[gcode_macro POWER_OFF_PRINTER]
description: Toggle smart plug off via Moonraker
gcode:
  {action_call_remote_method("set_device_power", device="printer_plug", state="off")}

[delayed_gcode delayed_printer_off]
initial_duration: 0.
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    POWER_OFF_PRINTER
  {% endif %}

[idle_timeout]
gcode:
  M118 Printer has been idle for 5 minutes. Printer will shutdown in 10 minutes!
  M84
  TURN_OFF_HEATERS
  UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=300   ; shutoff 5 min after idle
timeout: 900  ; idle after 15 min


######################################################################
## Git Backup
######################################################################

[gcode_macro UPDATE_GIT]
description: Run klipper-backup script with optional commit message
gcode:
    {% set msg = params.MESSAGE|default("")|string %}
    {% if msg|length > 0 %}
        {% set safe = msg.replace("'", "'\"'\"'") %}
        RUN_SHELL_COMMAND CMD=update_git_script PARAMS="-c '{{ safe }}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -lc "bash \"$HOME/klipper-backup/script.sh\" {params}"
timeout: 90.0
verbose: True
