
[gcode_macro START_PRINT]
gcode:
 
 {% set target_bed = params.BED|int %}
 {% set target_extruder = params.EXTRUDER|int %}
    
 M104 S{extruder_temp}    # Preheat nozzle to 140 and not wait

 M140 S{target_bed}        # Start bed heating

 G90                       # Use absolute coordinates
 
 G28                       # Home the printer

 RAINBOW_LEDS              #set LEDS

 G1 Z5 F5000              # Move the nozzle near the bed


 G1 Z2.5 F300             # Move the nozzle very close to the bed


 M190 S{target_bed}       # Wait for bed to reach temperature


   BED_MESH_CLEAR          # level the bed, save and load mesh

  BED_MESH_CALIBRATE ADAPTIVE=1 Method=rapid_scan ; Auto bed leveling 

   BED_MESH_PROFILE SAVE=current

   BED_MESH_PROFILE LOAD=current

 
 G92 E0                     # Reset Extruder

 G1 Z2.0 F3000              # Move Z Axis up

 G1 X165 Y25 Z2 F5000.0   # Move to start position
 M109 S{target_extruder}    # Set temp to printing temp and wait

 G1 X255 Y25 Z0 F400.0 E35  # Draw the first line
 G1 X255 Y26 Z0 F100.0 ;Move to side a little

 G92 E0                     # Reset Extruder
 G1 Z4.0 F3000              # Move Z Axis up
 SET_IDLE_TIMEOUT TIMEOUT=1000      ; 15minutes
 WIPE_NOZZLE

 G1 Z10.0 F3000




[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:

    # safe anti-stringing move coords
    #{% set th = printer.toolhead %}
    #{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    #{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    #{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10 F1800                ; retract filament
    G91                            ; relative positioning
    G0 Z20.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                    ; turn off fan
    G1 Z20 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X20 Y410 F3600            ; park nozzle at rear
    BED_MESH_CLEAR
    RAINBOW_LEDS_OFF
    
    #G1 X10 Y400 F6000;Finish print
    G4 S10
    M84 X Y E ;Disable all steppers but Z
    
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
   # STATUS_BUSY

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                 ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 Z30 F300 X10 Y10 F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        G1 E-20 F1800                                                                        ; retract filament
        M104 S0                                                                              ; turn off hotend
        M107                                                                                 ; turn off hotend fan
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        PURGE_LINE
        WIPE_NOZZLE_PAUSE                                                             ; wipes clean nozzle macro
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}


[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    M104 S230
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    #SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

   
   
   
   
   ######################################################################
## Filament Change                                                  ##
######################################################################
# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 130mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "SWAP_RESUME" gcode.
[gcode_macro M600]
########### Gcode ############
gcode:
  {% set X = params.X|default(printer.configfile.config["stepper_x"]["position_endstop"]|string)|int %}
  {% set Y = params.Y|default(printer.configfile.config["stepper_y"]["position_endstop"]|string)|int %}
  {% set Z = params.Z|default(10)|int %}
  {% set E = params.E|default(-20)|int %}
  {% set tool = params.tool|default(0)|int %}
      
        SAVE_GCODE_STATE NAME=M600_state
        PAUSE
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
        G91
        G1 E-5 F4000
        G1 Z30
        G90
        G1 X245 Y25 F3000        ;park position
        G0 E10 F500                ;extrude filament to get better blob on end
        G0 E80 F600             ;retract additional filament to move out of melt zone
        G92 E0
        





[gcode_macro PURGE]
gcode:
      M117 PURGING..
      G91
      G1 E50 F250
      G90



[gcode_macro LOAD_FILAMENT]
variable_load_distance: 80        # Distance to load filament into the extruder
variable_purge_distance: 30        # Distance to purge filament after loading
variable_nozzle_preheat_temp: 235  # Default preheat temperature for the nozzle
variable_turn_off_extruder: False   # Option to turn off the extruder after loading (True/False)
gcode:
     G1 Z30 F3000
    # Parameters and settings
    {% set load_speed = params.LOAD_SPEED|default(600) %}  # Speed in mm/min for fast filament loading
    {% set purge_speed = params.PURGE_SPEED|default(100) %}  # Speed in mm/min for purging filament
    {% set target_temp = params.TARGET_TEMP|default(230) %}  # Target temperature for the nozzle
    {% set min_temp = params.MIN_TEMP|default(225) %}  # Minimum safe temperature for extrusion

    # Save current state of the printer
    SAVE_GCODE_STATE NAME=load_state

    # Heat directly to the target temperature if it's above the minimum temperature
    M107
    {% if target_temp >= min_temp %}
        M104 S235 ; Set extruder to target temperature
        M109 s{target_temp} ; Wait for extruder to reach target temperature
    {% else %}
        # Heat to minimum temperature first if target is too low
        M104 S230 ; Set extruder to safe minimum temperature
        M109 s{min_temp} ; Wait for extruder to reach safe minimum temperature
    {% endif %}

    # Begin filament loading process
    G91 ; Set relative positioning for extrusion
    G92 E0 ; Reset extruder position
    G1 E{load_distance} F{load_speed} ; Load filament at the specified loading speed
    G1 E{purge_distance} F{purge_speed} ; Purge filament at the slower purging speed
    G1 E-5 F1800                ; retract filament
  
    # Optionally turn off the extruder heater after loading
    #{% endif %}

    # Restore previous state of the printer
    G90 ; Restore absolute positioning
    RESTORE_GCODE_STATE NAME=load_state

    # Completion message
    M117 Filament load complete




[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance: 100      # Distance to retract filament from the extruder
variable_nozzle_preheat_temp: 235  # Default preheat temperature for unloading
variable_turn_off_extruder: False   # Option to turn off the extruder after unloading (True/False)
gcode:
    M107
    # Parameters and settings
    {% set retract_speed = params.RETRACT_SPEED|default(600) %}  # Speed for retracting filament
    {% set target_temp = params.TARGET_TEMP|default(225) %}  # Target temperature for the nozzle
    {% set min_temp = params.MIN_TEMP|default(180) %}  # Minimum safe temperature for extrusion

    # Save current state of the printer
    SAVE_GCODE_STATE NAME=unload_state

    # Heat the nozzle to the target temperature if required
    {% if printer.extruder.temperature < target_temp %}
        # Ensure the nozzle is heated to the target temperature or at least the minimum safe temperature
        {% if target_temp >= min_temp %}
            M104 S235 ; Set extruder to target temperature
            M109 S{target_temp} ; Wait for extruder to reach target temperature
        {% else %}
            M104 S230 ; Set extruder to safe minimum temperature
            M109 S{min_temp} ; Wait for extruder to reach safe minimum temperature
        {% endif %}
    {% endif %}

    # Begin filament unloading process
    G91 ; Set relative positioning for extrusion
    G92 E0 ; Reset extruder position
    G1 E-{unload_distance} F{retract_speed} ; Retract filament at the specified speed
   # G4 S8  #wait 8 seconds
    # Optionally turn off the extruder heater after unloading
    #{% if turn_off_extruder %}
       # M104 S0 ; Turn off extruder heater
    #{% endif %}

    # Restore previous state of the printer
    G90 ; Restore absolute positioning
    RESTORE_GCODE_STATE NAME=unload_state

    # Completion message
    M117 Filament unload complete

[gcode_macro EXTRUDER_FRONT_CENTER]
gcode:
   #G28
   G1 Z45 F300
   G1 X245 Y25 F3000 
   


[gcode_macro G32]
gcode:
    BED_MESH_CLEAR

    G28
    #CQGL #Conditional QUAD_GANTRY_LEVEL
    G28 Z
   #park center of bed 175,175
    G0 X215 Y215 Z30 F3600
    #--------------------------------------------------------------------


[gcode_macro PIDtuneHOTEND]

gcode:

	{% set TEMP = params.TEMP|default(200)|float %}

	PID_CALIBRATE HEATER=extruder TARGET={TEMP}


[gcode_macro PIDtuneBED]

gcode:

    {% set TEMP = params.TEMP|default(60)|float %}

    PID_CALIBRATE HEATER=heater_bed TARGET={TEMP}

##################################################
#     Power Macros
##################################################
# Description: This section has a macro that calls moonraker to toggle our relay, a macro for delayed gcode, and a macro to call the delayed gcode when our printer enters the state "idle"

[gcode_macro POWER_OFF_PRINTER]
# Description: This macro asks moonraker to toggle our "relay" state to "off"
gcode:
  {action_call_remote_method("set_device_power", device="printer_plug", state="off")}
# Comments:
# action_call_remote_method is used to call a method registered by a remote client (moonraker)
# "set_device_power" is the method we want to call from the moonraker.cfg
# "device" is the name of the deivce defined in moonraker.cfg
# "state" is the state of the relay, on, off, or toggle

  
[delayed_gcode delayed_printer_off]
# Description: This macro calls the "POWER_OFF_PRINTER" macro once the "printer" object is in state "idle"
initial_duration: 0.
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    POWER_OFF_PRINTER
  {% endif %}
# Comments:
# "delayed_gcode" is a way to execute gcode after a set delay
# "initial_duration"
#   The duration of the initial delay (in seconds). If set to a
#   non-zero value the delayed_gcode will execute the specified number
#   of seconds after the printer enters the "ready" state. This can be
#   useful for initialization procedures or a repeating delayed_gcode.
#   If set to 0 the delayed_gcode will not execute on startup.
#   Default is 0.
# "POWER_OFF_PRINTER" calls the "POWER_OFF_PRINTER" macro defined above


##################################################
#     Idle Timeout
##################################################
[idle_timeout]
# Description: This macro is called when the printer goes into an idle state and calls the previous delayed_gcode. It updates the delay to the duration defined below.
# After 5 minutes (300seconds) of being idle, the gcode below will be called. It tells the relay to shut off after 10 minutes (600seconds).
gcode:
  M118 #Printer has been idle for 5 minutes. Printer will shutdown in 10 minutes!
  M84
  TURN_OFF_HEATERS
  UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=300 ; This is how long the relay will switch after the printer has gone idle
timeout: 900 ; This is how long it will take for the printer to go idle
# i.e. total time to shutoff is DURATION+timeout

# Comments:
# "idle_timeout" is a module that tracks the "state" of the printer. The "state" can be "Idle", "Printing", or "Ready"
# "M84" turns off the stepper motors
# "TURN_OFF_HEATERS" turns of the heaters
# "UPDATE_DELAYED_GCODE"
#   UPDATE_DELAYED_GCODE [ID=<name>] [DURATION=<seconds>]:
#   Updates the delay duration for the identified [delayed_gcode] and starts the timer for gcode execution.
#   A value of 0 will cancel a pending delayed gcode from executing.


[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c \"$0\""
timeout: 90.0
verbose: True