[include mainsail.cfg]
[include led_effects.cfg]

[include screws_tilt_adjust.cfg]
#[include nebula.cfg]

[include moonraker_obico_macros.cfg]
#[virtual_sdcard]
##[display_status]
#[pause_resume]

[include wipe_nozzle_pause.cfg]

[include macros.cfg]

[include sample-bigtreetech-adxl345-v2.0.cfg]

[include knomi.cfg]

[include bigtreetech-eddy-zoffbeta.cfg]

[include sample-bigtreetech-ebb-sb-usb-v1.0.cfg]

[include ebbfan.cfg]

[include skr3fan.cfg]

[exclude_object]

[include WIPE_NOZZLE.cfg]

# BTT CB2 / host CPU temperature
[temperature_sensor CB2_CPU]
sensor_type: temperature_host
min_temp: 0
max_temp: 90


[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32h723xx_070026001351333031373138-if00
# host MCU service is preinstalled and ready to use with:
#[mcu CB2]
#serial: /tmp/klipper_host_mcu

#[include generic-bigtreetech-xxx.cfg]

# This file contains common pin mappings for the BigTreeTech SKR 3.
# To use this config, the firmware should be compiled for the
# STM32H743 with a "128KiB bootloader".

# See docs/Config_Reference.md for a description of parameters.
# ===== TMC2209 Extruder Telemetry Logger =========================
# Logs driver thermal flags + actual current every N seconds.
# Outputs go to the console AND klippy.log.

# ===== TMC2209 Extruder Telemetry Logger =========================
# Logs driver thermal flags + actual current every N seconds.
# Outputs go to the console AND klippy.log.

# ===== TMC2209 Extruder Telemetry Logger (DUMP_TMC fallback) =====
[gcode_macro TMC_MON]
description: "Start/stop periodic TMC2209 extruder logging (DUMP_TMC)"
variable_interval_s: 60
variable_is_on: 0
gcode:
  {% if params.START|default(0)|int == 1 %}
    {% set iv = params.INTERVAL_S|default(variable_interval_s)|int %}
    SET_GCODE_VARIABLE MACRO=TMC_MON VARIABLE=interval_s VALUE={iv}
    SET_GCODE_VARIABLE MACRO=TMC_MON VARIABLE=is_on VALUE=1
    RESPOND TYPE=echo MSG="TMC_MON: started (every {iv}s)"
    UPDATE_DELAYED_GCODE ID=TMC_MON_TICK DURATION=0.1
  {% elif params.STOP|default(0)|int == 1 %}
    SET_GCODE_VARIABLE MACRO=TMC_MON VARIABLE=is_on VALUE=0
    UPDATE_DELAYED_GCODE ID=TMC_MON_TICK DURATION=0
    RESPOND TYPE=echo MSG="TMC_MON: stopped"
  {% else %}
    RESPOND TYPE=echo MSG="Usage: TMC_MON START=1 [INTERVAL_S=60] | TMC_MON STOP=1"
  {% endif %}

[delayed_gcode TMC_MON_TICK]
initial_duration: 0
gcode:
  {% if printer["gcode_macro TMC_MON"].is_on|int == 1 %}
    M105
    RESPOND TYPE=echo MSG="=== TMC_MON tick (extruder) ==="
    DUMP_TMC STEPPER=extruder
    {% set elapsed = printer.toolhead.print_time|float %}
    {% set msg = "TMC_MON elapsed=%.1fs" % (elapsed,) %}
    RESPOND TYPE=echo MSG="{msg}"
    UPDATE_DELAYED_GCODE ID=TMC_MON_TICK DURATION={printer["gcode_macro TMC_MON"].interval_s}
  {% endif %}
# =================================================================



[stepper_x]
step_pin: PD4
dir_pin: !PD3
enable_pin: !PD6
microsteps: 16
rotation_distance: 40
full_steps_per_rotation: 200
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_min: -2
#endstop_pin: ^PC1
position_endstop: 0
position_max: 430
homing_speed: 50
homing_retract_dist: 0
homing_positive_dir: false

[tmc2209 stepper_x]
uart_pin: PD5
diag_pin: ^PC1
driver_SGTHRS: 90
run_current: 0.8
hold_current: 0.6
sense_resistor: 0.220
interpolate: True
stealthchop_threshold: 0

[stepper_y]
step_pin: PA15
dir_pin: !PA8
enable_pin: !PD1
microsteps: 16
rotation_distance: 40
#endstop_pin: ^PC3
full_steps_per_rotation: 200
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_min: -2
position_endstop: 0
position_max: 435
homing_speed: 50
homing_retract_dist: 0
homing_positive_dir: false

[tmc2209 stepper_y]
uart_pin: PD0
diag_pin: ^PC3
driver_SGTHRS: 80
run_current: 0.6
hold_current: 0.35
sense_resistor: 0.220
interpolate: True
stealthchop_threshold: 0

[stepper_z]
step_pin: PE2
dir_pin: PE3
enable_pin: !PE0
microsteps: 16
rotation_distance: 8
full_steps_per_rotation: 200
endstop_pin: probe:z_virtual_endstop
position_min: -5
position_max: 395
homing_speed: 5            # was 8; 12–15 is fine
second_homing_speed: 3
homing_retract_dist: 7      # add this (5–10 typical)

[tmc2209 stepper_z]
uart_pin: PE1
# If you are NOT doing sensorless on Z, it's safer to REMOVE diag_pin entirely:
# diag_pin: PC0
run_current: 0.85
hold_current: 0.5
sense_resistor: 0.220
interpolate: True
stealthchop_threshold: 0



[filament_switch_sensor filament_sensor]
switch_pin:  ^PC15
pause_on_runout: True
insert_gcode:
    M117 Insert Detected


#[filament_motion_sensor filament_sensor]
#detection_length: 10
#extruder: extruder
#switch_pin: ^PC2
#pause_on_runout: True
#insert_gcode:
#    M117 Insert Detected
#runout_gcode:
#    M117 Runout Detected
    

[heater_bed]
heater_pin: PD7
sensor_type: Generic 3950
sensor_pin: PA1
control: pid          # <- use PID for normal operation
min_temp: 10
max_temp: 115



#[fan]
#Motherboard controler fan


[controller_fan motherboard_fan]
pin: PB7
stepper: stepper_x, stepper_y, stepper_z, extruder
heater: heater_bed
idle_timeout: 60


[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32h723xx_070026001351333031373138-if00

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 2000
max_z_velocity: 40
max_z_accel: 160
square_corner_velocity: 7
# (no max_accel_to_decel set → defaults to max_accel/2 = 1100)



[input_shaper]
shaper_type_x: mzv
shaper_freq_x: 38.4    # from X plot
shaper_type_y: ei
shaper_freq_y: 33.0    # from Y plot

[gcode_macro BED_STEP_RAMP]
description: Ramp bed to TARGET in fixed steps (default 10C) and hold at each step (default 70s) to avoid warping/overshoot.
# Tunables (can be overridden at call time)
variable_step_c: 10        # C per step
variable_hold_s: 70        # seconds to hold at each step
variable_tol_c: 1.0        # ±C window used by TEMPERATURE_WAIT
gcode:
  {% set target = params.TARGET|default(110)|float %}
  {% set step   = params.STEP|default(step_c)|int %}
  {% set hold   = params.HOLD_S|default(hold_s)|int %}
  {% set tol    = params.TOL|default(tol_c)|float %}

  {% if target < 1.0 %}{% set target = 1.0 %}{% endif %}
  {% if step   < 1 %}{% set step   = 1 %}{% endif %}
  {% if hold   < 1 %}{% set hold   = 1 %}{% endif %}

  {% set start = printer.heater_bed.temperature|float %}
  # Next multiple of STEP above current temp
  {% set first_stop = ((start / step)|int * step) + step %}
  {% if first_stop > target %}{% set first_stop = target %}{% endif %}

  {% set msg0 = "BED_STEP_RAMP: %.1f->%.0fC, step=%dC, hold=%ds" % (start, target, step, hold) %}
  RESPOND TYPE=echo MSG="{msg0}"

  # Step through: first_stop, first_stop+step, ..., < target
  {% for sp in range(first_stop|int, (target|int), step) %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={sp}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={sp - tol} MAXIMUM={sp + tol}
    {% set msgh = "Holding %.0fC for %ds..." % (sp, hold) %}
    RESPOND TYPE=echo MSG="{msgh}"
    G4 P{hold * 1000}
  {% endfor %}

  # Final target
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={target}
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={target - tol} MAXIMUM={target + tol}
  {% set msg1 = "BED_STEP_RAMP: Reached %.0fC." % (target,) %}
  RESPOND TYPE=echo MSG="{msg1}"


[gcode_macro PID_TUNE_SAFE_BED]
description: Gentle PID for bed: step-ramp to (TARGET-DELTA), then PID_CALIBRATE at TARGET. Optional autosave.
# Usage:
#   PID_TUNE_SAFE_BED TARGET=110 SAVE=1
#   PID_TUNE_SAFE_BED TARGET=70
# Optional knobs forwarded to ramp:
#   STEP=<C per step, default 10>  HOLD_S=<seconds per step, default 70>  TOL=<±C, default 1.0>
variable_default_delta: 2
gcode:
  {% set target   = params.TARGET|default(110)|float %}
  {% set delta    = params.DELTA|default(default_delta)|float %}
  {% set save_cfg = params.SAVE|default(0)|int %}
  {% set step     = params.STEP|default(none) %}
  {% set hold_s   = params.HOLD_S|default(none) %}
  {% set tol      = params.TOL|default(none) %}

  {% if target < 1.0 %}{% set target = 1.0 %}{% endif %}
  {% if delta  < 0.0 %}{% set delta  = 0.0 %}{% endif %}

  {% set preheat = target - delta %}
  {% if preheat < 1.0 %}{% set preheat = 1.0 %}{% endif %}

  {% set msg1 = "PID_TUNE_SAFE_BED: Preheating to %.0fC (step ramp), then PID at %.0fC." % (preheat, target) %}
  RESPOND TYPE=echo MSG="{msg1}"

  {% if step is not none and hold_s is not none and tol is not none %}
    BED_STEP_RAMP TARGET={preheat} STEP={step} HOLD_S={hold_s} TOL={tol}
  {% elif step is not none and hold_s is not none %}
    BED_STEP_RAMP TARGET={preheat} STEP={step} HOLD_S={hold_s}
  {% elif step is not none %}
    BED_STEP_RAMP TARGET={preheat} STEP={step}
  {% else %}
    BED_STEP_RAMP TARGET={preheat}
  {% endif %}

  {% set msg2 = "PID_TUNE_SAFE_BED: Starting PID_CALIBRATE at %.0fC." % (target,) %}
  RESPOND TYPE=echo MSG="{msg2}"
  PID_CALIBRATE HEATER=heater_bed TARGET={target}

  {% if save_cfg == 1 %}
    RESPOND TYPE=echo MSG="PID_TUNE_SAFE_BED: SAVE_CONFIG"
    SAVE_CONFIG
  {% endif %}

  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={target}
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={target-1} MAXIMUM={target+1}
  RESPOND TYPE=echo MSG="PID_TUNE_SAFE_BED: Complete."


# Convenience buttons (optional): 60C, 70C, 100C using the step-ramp
[gcode_macro BED_60]
description: Step-ramp bed to 60°C (10°C steps, 70s holds)
gcode:
  BED_STEP_RAMP TARGET=60 STEP=10 HOLD_S=70

[gcode_macro BED_70]
description: Step-ramp bed to 70°C (10°C steps, 70s holds)
gcode:
  BED_STEP_RAMP TARGET=70 STEP=10 HOLD_S=70

[gcode_macro BED_100]
description: Step-ramp bed to 100°C (10°C steps, 70s holds)
gcode:
  BED_STEP_RAMP TARGET=100 STEP=10 HOLD_S=70

# Chamber thermistor on SKR 3 EZ TH1
[temperature_sensor chamber]
sensor_type: Generic 3950
sensor_pin: PA3 # TH1 on SKR 3 EZ (verify silkscreen)
pullup_resistor: 4700    # SKR boards use 4.7k pull-ups
min_temp: -20
max_temp: 120





########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,
    EXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,
    EXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>

# See the sample-lcd.cfg file for definitions of common LCD displays.

########################################
# TMC2209 configuration
########################################







#[tmc2209 extruder]
#uart_pin: PC6
#run_current: 0.600
#diag_pin:

#[tmc2209 extruder1]
#uart_pin: PD12
#run_current: 0.600
#diag_pin:

########################################
# TMC2130 configuration
########################################

#[tmc2130 stepper_x]
#cs_pin: PD5
#spi_software_miso_pin: PE15
#spi_software_mosi_pin: PE13
#spi_software_sclk_pin: PE14
#run_current: 0.800
#stealthchop_threshold: 999999
#diag1_pin: PC1

#[tmc2130 stepper_y]
#cs_pin: PD0
#spi_software_miso_pin: PE15
#spi_software_mosi_pin: PE13
#spi_software_sclk_pin: PE14
#run_current: 0.800
#stealthchop_threshold: 999999
#diag1_pin: PC3

#[tmc2130 stepper_z]
#cs_pin: PE1
#spi_software_miso_pin: PE15
#spi_software_mosi_pin: PE13
#spi_software_sclk_pin: PE14
#run_current: 0.650
#stealthchop_threshold: 999999
#diag1_pin: PC0

#[tmc2130 extruder]
#cs_pin: PC6
#spi_software_miso_pin: PE15
#spi_software_mosi_pin: PE13
#spi_software_sclk_pin: PE14
#run_current: 0.800
#stealthchop_threshold: 999999
#diag1_pin: PC2

#[tmc2130 extruder1]
#cs_pin: PD12
#spi_software_miso_pin: PE15
#spi_software_mosi_pin: PE13
#spi_software_sclk_pin: PE14
#run_current: 0.800
#stealthchop_threshold: 999999
#diag1_pin: PA0

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [probe_eddy_current btt_eddy]
#*# reg_drive_current = 15
#*# calibrate =
#*# 	0.050000:3238478.619,0.090000:3237864.096,0.130000:3237212.006,
#*# 	0.170000:3236556.609,0.210000:3235888.301,0.250000:3235204.460,
#*# 	0.290000:3234556.900,0.330000:3233835.575,0.370000:3233180.517,
#*# 	0.410000:3232494.135,0.450000:3231835.685,0.490000:3231199.792,
#*# 	0.530000:3230571.693,0.570000:3229940.264,0.610000:3229285.058,
#*# 	0.650000:3228716.372,0.690000:3228106.726,0.730000:3227515.723,
#*# 	0.770000:3226963.157,0.810000:3226382.844,0.850000:3225844.912,
#*# 	0.890000:3225288.350,0.930000:3224735.608,0.970000:3224222.491,
#*# 	1.010000:3223722.981,1.050000:3223235.616,1.090000:3222750.794,
#*# 	1.130000:3222294.864,1.170000:3221819.501,1.210000:3221346.922,
#*# 	1.250000:3220906.276,1.290000:3220438.837,1.330000:3220027.546,
#*# 	1.370000:3219565.716,1.410000:3219174.782,1.450000:3218766.285,
#*# 	1.490000:3218389.426,1.530000:3217965.733,1.570000:3217564.681,
#*# 	1.610000:3217210.021,1.650000:3216832.675,1.690000:3216456.484,
#*# 	1.730000:3216080.022,1.770000:3215719.653,1.810000:3215354.977,
#*# 	1.850000:3215021.716,1.890000:3214631.919,1.930000:3214332.631,
#*# 	1.970000:3213969.931,2.010000:3213626.522,2.050000:3213297.706,
#*# 	2.090000:3212970.957,2.130000:3212645.210,2.170000:3212344.142,
#*# 	2.210000:3212007.521,2.250000:3211711.589,2.290000:3211411.970,
#*# 	2.330000:3211136.622,2.370000:3210850.111,2.410000:3210540.466,
#*# 	2.450000:3210284.293,2.490000:3210014.969,2.530000:3209735.388,
#*# 	2.570000:3209472.386,2.610000:3209207.236,2.650000:3208974.010,
#*# 	2.690000:3208743.086,2.730000:3208481.072,2.770000:3208249.408,
#*# 	2.810000:3208004.985,2.850000:3207800.407,2.890000:3207574.375,
#*# 	2.930000:3207355.106,2.970000:3207134.403,3.010000:3206920.367,
#*# 	3.050000:3206688.223,3.090000:3206492.107,3.130000:3206286.552,
#*# 	3.170000:3206113.819,3.210000:3205897.640,3.250000:3205725.382,
#*# 	3.290000:3205545.386,3.330000:3205324.180,3.370000:3205191.017,
#*# 	3.410000:3204991.432,3.450000:3204828.905,3.490000:3204702.796,
#*# 	3.530000:3204503.460,3.570000:3204346.925,3.610000:3204186.192,
#*# 	3.650000:3204025.489,3.690000:3203876.399,3.730000:3203710.051,
#*# 	3.770000:3203560.950,3.810000:3203422.134,3.850000:3203292.441,
#*# 	3.890000:3203149.243,3.930000:3203003.318,3.970000:3202859.904,
#*# 	4.010000:3202726.191,4.050000:3202600.118
#*#
#*# [temperature_probe btt_eddy]
#*# calibration_temp = 49.526220
#*# drift_calibration =
#*# 	3274238.528382, -1050.979270, 9.719414
#*# 	3250513.025280, -451.839830, 3.800633
#*# 	3238539.712094, -318.721378, 2.615138
#*# 	3229404.470212, -233.890181, 1.753721
#*# 	3220500.820526, -98.066528, 0.423859
#*# 	3213820.260864, -1.221144, -0.511388
#*# 	3209302.907959, 43.301258, -0.921270
#*# 	3205573.811628, 80.046592, -1.267420
#*# 	3201702.289020, 140.510842, -1.837133
#*# drift_calibration_min_temp = 33.55159907837751
#*#
#*# [input_shaper]
#*#
#*# [heater_bed]
#*# pid_kp = 62.465
#*# pid_ki = 1.482
#*# pid_kd = 658.225
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.200123, -0.218205, -0.264081, 0.002715, 0.059187, 0.110825, 0.171465, -0.145347, -0.083750, 0.016415
#*# 	-0.009191, 0.022377, -0.018870, -0.014405, 0.027757, 0.064746, 0.094801, 0.144629, 0.222331, 0.339537
#*# 	-0.069198, -0.015787, -0.056986, -0.064640, -0.040944, -0.019833, 0.002723, 0.031505, 0.087114, 0.121150
#*# 	-0.059897, 0.004573, -0.026524, -0.032530, -0.003360, 0.007992, 0.018087, 0.038048, 0.065813, 0.064613
#*# 	-0.009535, 0.063323, 0.031035, 0.017896, 0.020812, 0.041331, 0.028361, 0.030470, 0.055275, 0.056767
#*# 	0.005806, 0.080730, 0.061391, 0.056341, 0.072947, 0.081408, 0.083686, 0.078545, 0.093029, 0.090803
#*# 	-0.019265, 0.062773, 0.048272, 0.046180, 0.066819, 0.078813, 0.074834, 0.075177, 0.106957, 0.112396
#*# 	-0.014927, 0.070055, 0.067442, 0.075385, 0.149475, 0.139059, 0.139216, 0.145906, 0.164663, 0.155403
#*# 	0.051200, 0.113302, 0.093772, 0.082998, 0.105941, 0.109202, 0.105325, 0.113387, 0.138082, 0.157033
#*# 	0.089861, 0.145589, 0.093227, 0.076946, 0.094429, 0.110245, 0.130239, 0.140683, 0.189768, 0.152736
#*# x_count = 10
#*# y_count = 10
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 15.0
#*# max_x = 404.96999999999997
#*# min_y = 30.0
#*# max_y = 390.0
#*#
#*# [bed_mesh current]
#*# version = 1
#*# points =
#*# 	  0.205478, 0.241523, 0.208080
#*# 	  0.235713, 0.257555, 0.202608
#*# 	  0.115589, 0.112108, 0.103471
#*# 	  -0.000400, -0.028136, -0.012754
#*# x_count = 3
#*# y_count = 4
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 168.49
#*# max_x = 251.49
#*# min_y = 145.877
#*# max_y = 274.09700000000004
